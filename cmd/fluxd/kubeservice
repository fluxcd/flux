#!/usr/bin/env python

import yaml, sys, os, os.path, string, subprocess, optparse, json


class Kubeimage(Exception):
  pass


def label_match(selector, labels):
  for k, v in selector.iteritems():
    if k not in labels:
      return False
    if labels[k] != v:
      return False
  return True


def safe_lookup(d, ks, default=None):
  for k in ks:
    if k not in d:
      return default
    d = d[k]
  return d


def load_service(path):
  _, extension = os.path.splitext(path)
  if extension != ".yaml":
    raise Kubeimage("Not a yaml file '%s'" % path)

  with open(path, 'r') as stream:
    obj = yaml.load(stream)

  if obj["kind"] != "Service":
    return None

  return obj


def load_services(path):
  services = []
  for filename in os.listdir(path):
    try:
      service = load_service(os.path.join(path, filename))
      if service is not None:
        services.append(service)
    except Kubeimage, e:
      print >> sys.stderr, "Error reading file '%s': %s" % (filename, e)
  return services


def service_for_file(path):
  _, extension = os.path.splitext(path)
  if extension != ".yaml":
    raise Kubeimage("Not a yaml file")

  with open(path, 'r') as stream:
    obj = yaml.load(stream)

  kind = obj["kind"]
  if kind not in {"ReplicationController", "Deployment"}:
    raise Kubeimage("Not a ReplicationController or Deployment")

  namespace = safe_lookup(obj, ["metadata", "namespace"], default="default")
  labels = safe_lookup(obj, ["spec", "template", "metadata", "labels"])
  if labels is None:
    raise Kubeimage("Could not find labels in '%s'" % path)

  for service in load_services(os.path.dirname(path)):
    svc_namespace = safe_lookup(service, ["metadata", "namespace"], default="default")
    if svc_namespace != namespace:
      continue

    selector = safe_lookup(service, ["spec", "selector"])
    if selector is not None and label_match(selector, labels):
      svc_name = safe_lookup(service, ["metadata", "name"])
      if svc_name is not None:
        yield (svc_namespace, svc_name)


if __name__ == "__main__":
  parser =  optparse.OptionParser("""usage: %prog [options] <file>...

Attempt to return the service name for a given file by trying to match label
selectors.  Assumes service conf is in the same directory.  Does not talk to
the Kubernetes cluster in any way.""")
  (options, args) = parser.parse_args()
  if len(args) == 0:
    parser.print_help()
    sys.exit(1)

  for service in service_for_file(args[0]):
    print "%s/%s" % service

