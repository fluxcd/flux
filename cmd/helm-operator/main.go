package main

import (
	"sync"
	"syscall"
	"time"

	"net/url"

	"github.com/spf13/pflag"

	"fmt"
	"os"
	"os/signal"

	"github.com/go-kit/kit/log"

	clientset "github.com/weaveworks/flux/integrations/client/clientset/versioned"
	ifinformers "github.com/weaveworks/flux/integrations/client/informers/externalversions"
	fluxhelm "github.com/weaveworks/flux/integrations/helm"
	"github.com/weaveworks/flux/integrations/helm/chartsync"
	"github.com/weaveworks/flux/integrations/helm/git"
	"github.com/weaveworks/flux/integrations/helm/operator"
	"github.com/weaveworks/flux/integrations/helm/release"
	"github.com/weaveworks/flux/integrations/helm/releasesync"
	"github.com/weaveworks/flux/integrations/helm/status"
	"github.com/weaveworks/flux/ssh"

	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"

	gitssh "gopkg.in/src-d/go-git.v4/plumbing/transport/ssh"
)

var (
	fs      *pflag.FlagSet
	err     error
	logger  log.Logger
	kubectl string

	kubeconfig *string
	master     *string

	tillerIP        *string
	tillerPort      *string
	tillerNamespace *string

	tillerTLSVerify *bool
	tillerTLSEnable *bool
	tillerTLSKey    *string
	tillerTLSCert   *string
	tillerTLSCACert *string

	chartsSyncInterval  *time.Duration
	chartsSyncTimeout   *time.Duration
	eventHandlerWorkers *uint

	customKubectl *string
	gitURL        *string
	gitBranch     *string
	//gitConfigPath *string
	gitChartsPath *string

	k8sSecretName            *string
	k8sSecretVolumeMountPath *string
	k8sSecretDataKey         *string

	queueWorkerCount *int

	name       *string
	listenAddr *string
	gcInterval *time.Duration

	ErrOperatorFailure = "Operator failure: %q"
)

const (
	defaultGitConfigPath = "releaseconfig"
	defaultGitChartsPath = "charts"
)

func init() {
	// Flags processing
	fs = pflag.NewFlagSet("default", pflag.ExitOnError)
	fs.Usage = func() {
		fmt.Fprintf(os.Stderr, "DESCRIPTION\n")
		fmt.Fprintf(os.Stderr, "  helm-operator is a Kubernetes operator for Helm integration into flux.\n")
		fmt.Fprintf(os.Stderr, "\n")
		fmt.Fprintf(os.Stderr, "FLAGS\n")
		fs.PrintDefaults()
	}

	kubeconfig = fs.String("kubeconfig", "", "Path to a kubeconfig. Only required if out-of-cluster.")
	master = fs.String("master", "", "The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.")

	tillerIP = fs.String("tiller-ip", "", "Tiller IP address. Only required if out-of-cluster.")
	tillerPort = fs.String("tiller-port", "", "Tiller port.")
	tillerNamespace = fs.String("tiller-namespace", "kube-system", "Tiller namespace. If not provided, the default is kube-system.")

	tillerTLSVerify = fs.Bool("tiller-tls-verify", false, "Verify TLS certificate from Tiller. Will enable TLS communication when provided.")
	tillerTLSEnable = fs.Bool("tiller-tls-enable", false, "Enable TLS communication with Tiller. If provided, requires TLSKey and TLSCert to be provided as well.")
	tillerTLSKey = fs.String("tiller-tls-key-path", "/etc/fluxd/helm/tls.key", "Path to private key file used to communicate with the Tiller server.")
	tillerTLSCert = fs.String("tiller-tls-cert-path", "/etc/fluxd/helm/tls.crt", "Path to certificate file used to communicate with the Tiller server.")
	tillerTLSCACert = fs.String("tiller-tls-ca-cert-path", "", "Path to CA certificate file used to validate the Tiller server. Required if tiller-tls-verify is enabled.")

	chartsSyncInterval = fs.Duration("charts-sync-interval", 3*time.Minute, "Interval at which to check for changed charts")
	chartsSyncTimeout = fs.Duration("charts-sync-timeout", 1*time.Minute, "Timeout when checking for changed charts")
	eventHandlerWorkers = fs.Uint("event-handler-workers", 2, "Number of workers processing events for Flux-Helm custom resources")

	customKubectl = fs.String("kubernetes-kubectl", "", "Optional, explicit path to kubectl tool")
	gitURL = fs.String("git-url", "", "URL of git repo with Helm Charts; e.g., git@github.com:weaveworks/flux-example")
	gitBranch = fs.String("git-branch", "master", "branch of git repo")
	gitChartsPath = fs.String("git-charts-path", defaultGitChartsPath, "path within git repo to locate Helm Charts (relative path)")

	// k8s-secret backed ssh keyring configuration
	//		generated by flux daemon
	k8sSecretVolumeMountPath = fs.String("k8s-secret-volume-mount-path", "/etc/fluxd/ssh", "Mount location of the k8s secret storing the private SSH key")
	k8sSecretDataKey = fs.String("k8s-secret-data-key", "identity", "Data key holding the private SSH key within the k8s secret")

	queueWorkerCount = fs.Int("queue-worker-count", 2, "Number of workers to process queue with Chart release jobs. Two by default")
}

func main() {

	fs.Parse(os.Args)

	// LOGGING ------------------------------------------------------------------------------
	{
		logger = log.NewLogfmtLogger(os.Stderr)
		logger = log.With(logger, "ts", log.DefaultTimestampUTC)
		logger = log.With(logger, "caller", log.DefaultCaller)
	}

	// SHUTDOWN  ----------------------------------------------------------------------------
	errc := make(chan error)

	// Shutdown trigger for goroutines
	shutdown := make(chan struct{})
	shutdownWg := &sync.WaitGroup{}

	go func() {
		c := make(chan os.Signal)
		signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
		errc <- fmt.Errorf("%s", <-c)
	}()

	defer func() {
		logger.Log("exiting...", <-errc)
		close(shutdown)
		shutdownWg.Wait()
	}()

	mainLogger := log.With(logger, "component", "helm-operator")

	// CLUSTER ACCESS -----------------------------------------------------------------------
	cfg, err := clientcmd.BuildConfigFromFlags(*master, *kubeconfig)
	if err != nil {
		mainLogger.Log("error", fmt.Sprintf("Error building kubeconfig: %v", err))
		os.Exit(1)
	}

	kubeClient, err := kubernetes.NewForConfig(cfg)
	if err != nil {
		mainLogger.Log("error", fmt.Sprintf("Error building kubernetes clientset: %v", err))
		os.Exit(1)
	}

	// CUSTOM RESOURCES CLIENT --------------------------------------------------------------
	ifClient, err := clientset.NewForConfig(cfg)
	if err != nil {
		mainLogger.Log("error", fmt.Sprintf("Error building integrations clientset: %v", err))
		//errc <- fmt.Errorf("Error building integrations clientset: %v", err)
		os.Exit(1)
	}

	// HELM ---------------------------------------------------------------------------------
	helmClient := fluxhelm.ClientSetup(log.With(logger, "component", "helm"), kubeClient, fluxhelm.TillerOptions{
		IP:        *tillerIP,
		Port:      *tillerPort,
		Namespace: *tillerNamespace,

		TLSVerify: *tillerTLSVerify,
		TLSEnable: *tillerTLSEnable,
		TLSKey:    *tillerTLSKey,
		TLSCert:   *tillerTLSCert,
		TLSCACert: *tillerTLSCACert,
	})

	// The status updater, to keep track the release status for each
	// FluxHelmRelease. It runs as a separate loop for now.
	statusUpdater := status.New(ifClient, kubeClient, helmClient)
	go statusUpdater.Loop(shutdown, log.With(logger, "component", "annotator"))

	gitURLParsed, err := url.Parse(*gitURL)
	if err != nil {
		mainLogger.Log("error", fmt.Sprintf("Error parsing -git-url %q: %v", *gitURL, err))
		os.Exit(1)
	}

	// GIT REPO SETUP ---------------------------------------------------------------------
	var gitAuth *gitssh.PublicKeys
	for {
		gitAuth, err = git.GetRepoAuth(gitURLParsed.User.Username(), *k8sSecretVolumeMountPath, *k8sSecretDataKey)
		if err != nil {
			mainLogger.Log("error", fmt.Sprintf("Failed to set up git authorization : %#v", err))
			time.Sleep(20 * time.Second)
			continue
		}
		if err == nil {
			break
		}
	}

	gitRemoteConfig, err := git.NewGitRemoteConfig(*gitURL, *gitBranch, *gitChartsPath)
	if err != nil {
		mainLogger.Log("err", err)
		os.Exit(1)
	}
	gitLogger := log.With(logger, "component", "git")

	// 		Chart releases sync due to Custom Resources changes -------------------------------
	mainLogger.Log("info", "Starting to clone repo ...")
	checkout := git.RepoSetup(gitLogger, gitAuth, gitRemoteConfig, git.ChangesClone)
	defer checkout.Cleanup()
	mainLogger.Log("info", "Repo cloned")

	// release instance is needed during the sync of Charts changes and during the sync of FluxHelRelease changes
	rel := release.New(log.With(logger, "component", "release"), helmClient, checkout)
	relsync := releasesync.New(log.With(logger, "component", "releasesync"), rel)

	// CHARTS CHANGES SYNC ------------------------------------------------------------------
	chartSync := chartsync.New(log.With(logger, "component", "chartsync"),
		chartsync.Polling{Interval: *chartsSyncInterval, Timeout: *chartsSyncTimeout},
		chartsync.Clients{KubeClient: *kubeClient, IfClient: *ifClient},
		rel, *relsync)
	chartSync.Run(shutdown, errc, shutdownWg)

	// OPERATOR - CUSTOM RESOURCE CHANGE SYNC -----------------------------------------------
	// CUSTOM RESOURCES CACHING SETUP -------------------------------------------------------
	//				SharedInformerFactory sets up informer, that maps resource type to a cache shared informer.
	//				operator attaches event handler to the informer and syncs the informer cache
	ifInformerFactory := ifinformers.NewSharedInformerFactory(ifClient, 30*time.Second)
	// Reference to shared index informers for the FluxHelmRelease
	fhrInformer := ifInformerFactory.Helm().V1alpha2().FluxHelmReleases()

	opr := operator.New(log.With(logger, "component", "operator"), kubeClient, fhrInformer, rel)
	// Starts handling k8s events related to the given resource kind
	go ifInformerFactory.Start(shutdown)

	if err = opr.Run(*queueWorkerCount, shutdown, shutdownWg); err != nil {
		msg := fmt.Sprintf("Failure to run controller: %s", err.Error())
		logger.Log("error", msg)
		errc <- fmt.Errorf(ErrOperatorFailure, err)
	}
}

// Helper functions -----------------------------------------------------------------------
func optionalVar(fs *pflag.FlagSet, value ssh.OptionalValue, name, usage string) ssh.OptionalValue {
	fs.Var(value, name, usage)
	return value
}
