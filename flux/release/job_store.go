package release

import (
	"time"

	"github.com/weaveworks/fluxy/flux"
)

// JobStore sits between clients who want to make and check on the status of
// release jobs, and workers who pop and execute release jobs.
type JobStore interface {
	JobReader
	JobWriter
	JobPopper
}

type JobReadWriter interface {
	JobReader
	JobWriter
}

// JobReader is used by clients to query the status of their submitted job.
type JobReader interface {
	GetJob(ID) (Job, error)
}

// JobWriter is used by clients to submit a release job.
type JobWriter interface {
	PutJob(JobSpec) (ID, error)
}

// JobPopper is used by workers.
type JobPopper interface {
	NextJob() (Job, error)
	UpdateJob(Job) error
}

// JobSpec is submitted by clients.
type JobSpec struct {
	ServiceSpec flux.ServiceSpec `json:"service_spec"`
	ImageSpec   flux.ImageSpec   `json:"image_spec"`
	Kind        flux.ReleaseKind `json:"kind"`
}

// Job is produced by the Put method, stored in the job store, and operated upon
// by release workers. Jobs are also returned to clients.
type Job struct {
	JobSpec   JobSpec   `json:"job_spec"`       //
	ID        ID        `json:"id"`             // generated by the Put action
	Submitted time.Time `json:"submitted"`      //
	Log       []string  `json:"log,omitempty"`  // appended-to by the worker
	Status    string    `json:"status"`         // human-readable current status
	Done      time.Time `json:"done,omitempty"` //
	Success   bool      `json:"success"`        // only really meaningful after Done
}

// ID is a UUID to identify a release job.
type ID string
