// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7265,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x6f\x1b\x37\x12\x7f\xf7\x5f\x31\x50\x0e\x48\x0c\x48\x2b\x3b\x6e\x8b\xc3\xf6\x54\x5c\x9a\x0f\x37\x97\x26\x35\xec\xe4\x0e\x7d\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x05\xa1\xff\xfb\x61\xc8\xfd\xe0\xca\xb2\x53\xf4\xed\xf2\x10\xdb\xbb\xc3\xe1\xcc\x6f\xbe\x7e\xe4\xce\x66\xb3\x33\x51\xab\x7f\xa3\x23\x65\x4d\x0e\xa2\xae\x69\xbe\xbd\x3c\xdb\x28\x53\xe4\xf0\x06\x6b\x6d\xf7\x15\x1a\x7f\x56\xa1\x17\x85\xf0\x22\x3f\x03\x30\xa2\xc2\x1c\x56\xba\xf9\xfd\x70\x00\xb5\x82\xec\x93\xa8\x90\x6a\x21\x11\xfe\xf8\xa3\x7d\x1f\xfe\xcc\xe1\x70\x18\xbf\x3d\x1c\x00\x4d\xc1\x62\x54\xa3\x64\x65\x0e\x6b\xad\xa4\xa0\x1c\x2e\xcf\x00\x08\x35\x4a\x6f\x1d\xbf\x01\xa8\x84\x97\xe5\xcf\x62\x89\x9a\xe2\x83\x74\x6f\x96\xf6\x4e\x78\x5c\xef\xe3\x4b\xbf\xaf\x31\x87\x5b\x94\x0e\x85\xc7\x33\x00\x8f\x55\xad\x85\xc7\x56\x59\xe2\x01\xff\x13\xc6\x58\x2f\xbc\xb2\xa6\x57\x0e\x50\x3b\x5b\xa1\x2f\xb1\xa1\x4c\xd9\x79\x6d\x9d\xcf\x61\x72\x75\x71\x75\x39\x81\x67\xe0\x51\xeb\x44\x02\xbc\x05\x92\x4e\xd4\x08\xf3\x0a\xbd\x53\x92\xd8\xb9\xda\x2a\xe3\x9f\x13\xf0\xe2\xac\x55\xac\x47\x3e\x1c\x79\x01\xd0\x61\x11\x5e\xd9\x02\xef\x46\x28\xf0\xbf\x25\x7a\x91\x6d\x9a\x25\x3a\x83\x1e\x83\x71\x96\x72\xd0\xca\xb4\x2a\x18\x3a\xb7\x55\x12\x5f\x49\x69\x1b\xe3\x3f\x8d\x77\x00\xd8\x5a\xdd\x54\xd8\xdb\x30\x6b\x6d\x58\x2b\x3f\xdb\xe0\xbe\xdf\x88\x18\x3e\x3f\x6c\xdc\x3d\x19\xf4\xcd\x78\x49\x11\x32\x23\x91\x2a\x70\x25\x1a\xed\x3f\xda\x02\x73\xb8\xf8\xe6\xe2\x02\x9e\xc1\xae\x44\x03\x15\x5b\x83\x05\x38\x14\xc5\xcc\x1a\xbd\x9f\xc2\x0e\x61\x67\xcd\x73\x0f\x4b\x04\xb1\xd4\xc8\x40\xca\xb2\xb2\xc5\x59\xab\xf0\x19\x7c\x2e\x15\x81\x22\x10\xe0\xab\x7a\x45\xd0\x10\x16\xb0\xb2\x0e\xd6\x68\xd0\x09\xaf\xcc\x1a\xee\xee\x7e\x82\x0d\xee\x29\x83\xf7\x06\x3e\xfc\x9d\xe0\x87\x05\x5c\x66\x97\x17\xd3\x5e\x4b\xb7\x77\x74\x81\x40\x38\x4c\xed\x20\xcb\xa6\x18\xc4\x02\x04\x10\xd6\x82\xb3\xa9\x05\x0a\x76\xd8\xab\x91\xc2\xc0\xce\x29\xcf\x86\x66\xa7\xf1\x5b\xa3\xe9\xc1\xc0\xaa\xf6\xfb\x37\xca\xa5\x20\x56\x58\xa8\xa6\xca\xe1\x23\x56\xd6\xed\x53\x3f\x11\x56\x56\x6b\xbb\x63\x8f\xda\xad\x15\x05\x57\x1b\xe2\x67\x02\x64\x43\xde\x56\x8a\x11\xd8\x18\xbb\x33\xbf\x95\x96\x3c\xf5\x2a\x56\x4a\xe3\x14\x76\xa5\x92\x25\xec\x6d\x03\x3b\xa5\x75\x74\xca\x5b\x28\x2c\x17\x28\x3f\xe6\x45\xfc\x8b\x03\xbb\x33\x6c\x76\xaf\xc0\x61\x6d\xc1\x09\x5f\xa2\x03\x5f\x0a\xd3\x6e\xbc\x56\xbe\x6c\x96\x60\xf9\x21\x82\x56\x1b\xcc\xe0\x57\xdb\x3c\xd7\x1a\x84\x26\xdb\x6d\x31\x06\x1b\x94\x07\x65\xbc\x0d\x6b\xa4\x35\x5e\x28\x83\x6e\x0a\x4b\xd4\x76\x97\xc1\x1d\x0e\xa8\x96\xde\xd7\x94\xcf\xe7\x85\x95\x94\x71\x62\xc9\x82\xd3\x1a\xcd\x9c\x6b\x96\xfc\x7c\xdd\xa8\x02\x69\xde\x10\xce\x6a\xa7\xb6\xc2\x63\x48\x3d\x76\xa4\x57\xd2\x85\x81\xa8\x9c\x49\x6b\x56\x6a\xdd\xbf\x02\x88\x0f\x3e\x8a\x3a\x4f\x1e\xa6\xc5\x37\x4b\x96\xfd\xd5\x90\x84\xaa\x9c\x47\x25\x43\xe6\x7d\x35\x1c\x3b\x45\x25\x3f\x29\xc5\x16\x41\x40\xa1\x56\x2b\x74\xdc\x68\x3b\x0d\x6d\x41\x0d\xcd\x34\xa0\x1f\xd5\xa5\xf8\x73\x43\xda\xaa\x02\x3b\xc4\x57\x6a\x5d\x89\x7a\x30\x44\xf9\x12\x84\x01\x34\xde\xed\x83\x0f\xf7\x51\xe8\x7e\x0a\xc2\x14\xd0\x18\x69\x2b\xee\xf0\x61\x7d\xf4\xf6\x63\x88\xa4\x30\x45\xaf\x05\xcd\x36\x68\x50\x48\x6d\x28\x1f\x44\x80\x61\xf8\x0b\x11\x48\x96\x7d\x35\x02\xa1\x09\x78\x0b\xaa\xe2\xde\x0a\xd7\x37\xd7\xa1\xfe\xe1\x05\xbb\x45\x6a\x6d\x94\x19\x36\x67\xe7\xb6\xe8\xd4\x4a\xc9\xd0\xe4\xa1\x6e\x5c\x6d\x09\xe9\xfc\x4f\x00\xd9\x6b\x89\x9d\x23\xa2\xc8\x00\xf1\x7e\x7f\x02\x38\x10\x6e\x3d\x54\xe8\x23\x88\xad\xeb\x35\xb7\x0e\x4a\xa0\x19\x77\xdf\x67\x8f\xf4\xdf\x87\xeb\x4e\xf4\xdf\x0e\xce\xbe\x08\x1f\xb4\xfe\x64\x38\xb4\xa8\x3b\x0c\x2d\xd2\x58\x98\xe4\xb1\x08\x27\xa0\x2a\xb1\xc6\x98\xfd\xbc\x20\x83\x77\xca\x14\xc1\xe7\x8a\x3b\x8a\x43\x39\x64\x6d\xec\x26\x1a\x05\x21\xf7\x8d\xb0\x94\x83\xc0\xdc\x02\x84\xef\x4b\xbe\x6c\x96\x59\x61\xe5\x06\x5d\x26\x6d\x35\x77\xf3\x58\xfe\xe1\xc7\xdc\x8b\x1e\xba\x2e\x8e\xcc\x11\x98\x3f\xf0\xae\x5e\xac\x81\x2d\xcd\x7a\x99\xb0\x4d\x0e\xad\x42\x65\x53\x6d\xf9\x65\xf6\xf2\x32\x7b\x39\x96\xbd\x69\xb4\xbe\xb1\x5a\xc9\x7d\x0e\xef\x57\x9f\xac\xbf\x71\x48\xa9\x17\x0e\xc9\x36\x4e\x22\xa5\x2d\xdc\xe1\x7f\x1b\x24\x3f\x7a\x06\x20\xeb\x26\x87\x6f\x2f\xaa\xd1\xc3\x2a\x74\xf9\x1c\xbe\xfb\xe6\xa3\x1a\xa8\x85\x75\xe9\xe2\xd9\x10\x99\x9b\x40\x33\xae\x2e\xae\x78\x68\x2a\xb3\xb2\xae\x0a\x29\x2b\x74\x2f\xad\xd5\x16\x0d\x12\xdd\x38\xbb\xc4\xd4\x02\x86\xf4\x7a\x3c\xb0\xe3\x56\x51\xe1\xf8\xb1\xf0\x65\x0e\x73\x51\xab\x88\xf4\xf6\xbb\xb9\x2a\xd0\x78\xe5\xf7\x59\xdd\x2c\x13\x59\x65\x94\x57\x42\xbf\x41\x2d\xf6\x77\x5c\x9f\x05\xe5\xf0\x6d\x22\xe0\x55\x85\xb6\xf1\x27\xde\xf1\x7c\x55\xff\x1f\xa6\x26\x45\x3b\x0a\xcc\x69\x66\x04\x71\xc2\xdd\x44\xcb\xd0\xcb\x60\x59\x31\x27\x2a\x99\x1b\xda\xc8\x56\x41\xdb\xb6\xdf\xac\x39\x64\xa0\x4c\xcc\xb9\xe7\x14\xd7\x10\x95\xf3\x51\x9b\xec\x30\xfb\xc5\xe8\x7d\x0e\xde\x35\xc8\xda\x98\xfe\x84\x0e\xb5\x6c\x1b\x3b\x97\x54\x8d\x6e\x65\x9d\x44\x56\x1a\xf9\x0e\xd3\x9d\xc7\x0c\x4f\x29\xc9\xd8\xf6\xad\x70\xad\xed\x51\xec\xaf\x99\x9f\xd4\xe8\x7b\x23\x75\x13\x3a\x27\xb3\xb6\x38\xe0\xba\xae\x1a\x69\xc1\x57\x58\x4c\xc7\x63\xbe\xe7\xa5\x47\x0c\xa3\xef\xae\x50\xa0\xd4\xc2\x31\x5b\x5b\xda\x6d\xd2\x00\x9e\xa0\x01\xb1\x3d\xa6\xce\x3b\x6b\xfd\x3c\x23\x2a\x1f\x75\x40\x98\xd1\xae\x93\x61\x44\x4d\xe2\xce\xd3\x4e\x24\xd1\x80\x66\xab\x9c\x35\x61\x20\xc4\x59\x3b\xf9\xf0\xe5\xc7\xb7\xaf\x7f\xf9\xf4\xee\xfd\xf5\x24\x8e\x80\x29\xe3\x61\xb7\xe8\xdc\x78\x5e\x27\x6a\xc2\x88\x5b\xee\xe3\x34\xf5\xfa\x94\x8f\x0f\x06\xed\x43\x1f\x87\xe4\x64\xe1\x47\x1d\xe5\x99\xc7\x87\x95\x6e\x37\x6e\xd1\x09\x15\x69\xad\x0b\x31\x49\x54\x1c\x13\x9a\x34\xe8\x81\xcd\x74\xac\x5b\x18\x10\xda\xa3\x33\xcc\xaa\x1f\x58\xbc\x72\xb6\xe2\xb4\xe8\x18\xcb\x14\x04\x71\xba\xb5\x53\x95\x61\xd0\x56\x6e\xe8\x61\xb0\xd1\x6c\xf3\x13\xb8\x0c\x70\x8f\x70\xd9\x0a\xdd\xe0\x03\x4c\xbe\x96\xc4\xc7\x39\xd0\xcd\xdc\x27\x32\x80\x47\xfe\x78\xd4\x3f\x31\xec\x1f\xc9\x4b\x96\x8a\xec\x66\x24\x37\xee\x0f\x5f\xab\xbc\x9d\x60\x52\x62\x81\x9a\xba\xd6\x7b\xf8\xe9\xf3\xe7\x1b\x58\x0a\x52\x12\x44\xe3\x4b\x90\x0e\x43\x27\x15\x3a\x4e\xf5\xe1\x28\xc0\x0a\xb7\x4a\x04\xc7\xef\xaf\xdf\x7f\xfe\xed\xd5\x97\xcf\x3f\x7d\xb9\x7b\x7b\x7b\x1f\xdc\xed\x1f\x7d\x78\xfb\xeb\xfd\x28\xe1\xb7\xc2\x29\x3e\xc8\x51\x47\x90\x13\x85\x91\xbe\x1c\xc5\xef\x9d\xb3\xd5\x38\x86\x51\xec\x16\x57\xf9\xc8\xf3\x11\x57\xe4\xc6\xc6\x2e\x0c\x00\x30\xe6\xf9\x08\x8f\x08\x41\x3c\x9e\x62\xc1\x93\x58\x0a\x59\x62\xc1\xa9\x95\xe6\x76\x4f\xab\x19\x29\xd6\x3e\x4d\xb4\x58\xd7\xf2\xe6\x64\x41\x7b\xbc\x0e\x0b\xa7\x61\x13\x3e\x16\xb6\x18\xfb\x12\x29\xcd\x85\x81\xbd\xfa\x9d\x65\x2b\x1b\xc6\x29\x54\x5c\xb8\x44\x08\x89\x08\xa5\xdd\x85\xa3\xaf\x35\x06\x65\x08\x99\xf2\xe3\xdc\x99\xcd\x7a\x07\xc2\xb9\x87\x37\x5f\xf4\x8f\xb2\x96\xf4\x65\xb4\x95\x99\xd4\x0d\x79\x74\x19\x37\x70\x9d\x42\xf2\x85\x62\xaf\x19\xa0\x78\x1d\x45\xdf\xdf\x8c\x9c\xe2\xb6\x43\xe8\xc3\xd1\x7a\x9c\xd9\x83\x0d\x9d\x3c\x67\x97\x77\x2c\x19\x0e\xbb\xc9\x08\x4a\x2d\x6e\xa5\x17\x67\x23\x96\xa9\x08\xaa\x86\xc2\xe1\x3f\xa0\xa7\xb0\x88\xe5\xb4\x0c\x83\x2d\x70\xbc\x70\xe6\x7f\xd1\x1d\xa4\xcf\x53\x5b\xba\xe6\x12\xcb\x90\x13\x38\x39\xfa\x8f\x0c\xe1\x61\x10\x07\xdc\xac\x50\x6e\xf1\x60\xec\xa5\x66\xdd\x26\x0c\x73\x08\xde\x97\xdb\x9f\xe3\xdd\x84\x30\xeb\xf8\xee\x5a\xf9\x70\x5e\x26\xe5\xad\xdb\xf7\xed\xfa\x1d\x33\xe3\x44\xdd\x53\x35\xc7\x69\x93\xf8\xde\x96\xcc\xc9\x72\x4a\x6b\xa1\xe3\xce\x7f\x7b\x91\x56\xe6\x79\x3e\xfc\xfd\xe1\xed\xaf\xe7\xff\x8c\xa7\xf6\x40\xab\x1b\x42\x37\x1f\x8c\xcd\xd2\x42\x67\x7c\xb8\x9c\x1a\xa7\x17\x87\x03\x64\xd7\xca\xb3\xb3\xe1\xfa\x6e\x2c\xb1\x74\xc2\xc8\xb2\x13\xfa\x31\xfc\x15\x2f\xf2\xd4\x2a\x3c\xe2\xfe\x45\xa7\x56\x32\x87\xe3\x75\x77\x21\x53\xe8\x5f\x56\x99\x64\xc1\x64\x3a\x69\xef\x03\x35\x61\xba\xfc\xe9\xa6\xe6\x90\x13\x4f\xc6\x53\x57\x25\x8c\x5a\x31\x27\xe7\x1a\x22\x55\xa0\x8b\xe1\x38\x3a\xd9\x84\xeb\x08\x4b\x08\x8d\x29\xd0\x1d\xc5\xd8\xa1\x16\x5e\x6d\x31\x50\x4e\xea\x32\x70\x3d\x8a\xf3\x51\x4d\xf6\xce\x51\xb3\x2c\x94\xbb\x9c\xc6\x9f\x2f\xfb\xcb\xcd\x01\x9c\x70\x79\x79\x0a\x9c\x70\x23\xd8\xa1\xda\x49\x9d\x50\xf0\x85\xd0\x9d\x5a\xcf\xc1\xed\x23\xc7\x32\x70\x7a\xfd\xdb\x4a\xa8\x93\x06\x20\xbf\xe8\x34\x74\x52\xc3\xf5\xec\xc9\x70\x20\xb7\x92\x9d\x65\x40\xd1\x84\x9b\x3b\xc6\x89\x27\xb6\xf2\x47\x07\xf0\x14\xab\x76\xf6\xb5\x93\x6d\xf1\xc4\xa8\xeb\x56\xb4\xba\x78\xd5\xe2\x1f\x1b\xdc\x83\x2a\x7e\xe8\xc5\x9e\xa0\x33\x89\x55\xac\x42\xf8\xc6\xe1\xe8\x16\xe0\xc4\x5e\xe1\xf5\x7e\xd6\xcb\xd3\xa8\x5d\x75\xdd\x1a\x94\x87\x52\x50\x18\xc5\xd6\xe8\x3d\x08\x29\x91\x62\x47\x2f\x31\xde\xa1\xbd\xe8\xee\x6c\xee\x57\x42\x13\xde\x9f\x9f\x1d\x0e\xb3\x2e\x10\xb7\xed\x0c\x3f\x15\x8b\x4e\x69\x90\x7f\x58\x0f\xa7\xc5\x4e\xc4\x89\xbc\x6b\xa4\x8f\xf6\xee\xc2\x71\x9e\x29\x5e\xe3\x81\xf6\x46\xc2\xd2\xda\xcd\x06\xb1\xe6\xac\xef\x4d\x9d\xac\x95\x9f\x4c\xa1\x42\xc1\x80\x73\x43\x03\x11\xce\xd8\x6d\x21\x34\x35\x79\x87\xa2\xea\x2b\xe2\xfc\xc8\x30\x56\x3d\x23\x2f\x3c\x2e\xb8\xc1\x3c\x9a\x37\x06\x7f\xf7\x5d\xf2\x24\x13\x4f\x18\x98\x74\x7b\x4c\xba\x79\x94\x28\x79\x81\xd9\x3a\x9b\xc2\x7f\x90\x99\xe5\x6b\x6d\x9b\xe2\x3c\x0b\x17\x44\xde\x6e\xf8\x7c\x42\x50\x0b\xe7\x95\x6c\xb4\x70\x5d\x30\x5a\x2d\xc7\xa3\xb4\xdd\x75\xb1\x23\xee\xa3\x92\x75\x65\x3b\xd6\x9b\xed\xac\xdb\x50\x7f\xd8\x3c\x5a\x16\x36\x5a\x88\xa5\xbc\x7c\x79\xf5\xf0\xff\xd4\xe1\xb7\x31\xfb\xba\xae\xd4\xdf\x55\x5b\xf3\x44\x6a\x7c\x6c\xa5\xaf\x07\xe1\xa3\x0c\xe9\xf4\xcd\x06\x7d\x8b\xc0\x03\x1f\xcf\x96\x53\x4b\xc2\xc6\x8f\xa4\xce\x1d\xba\xed\x89\xaf\x18\x7c\x20\x18\x18\x10\xd7\xea\xf7\xe9\x28\x16\x1b\x1e\x63\x31\xcb\x08\x7d\xf2\x69\xe4\x79\xf2\x75\x25\xf9\x4c\xc2\xc1\x09\x57\x77\x81\x94\x67\x23\x2f\xb5\x22\x8f\x66\xd6\x9a\xb0\xc8\xaf\x2e\xae\x2e\x7b\x90\x6e\x71\xad\xc8\xbb\xfd\x1b\x45\x0c\xf1\x9d\x14\x26\xa4\xeb\x11\x52\xae\x15\x9b\x15\x51\x6e\x46\xad\x60\xea\x76\xdb\x1b\x5f\x15\x85\x8a\x97\x2c\x3c\xbc\x5f\x31\x79\x1f\xc1\x38\xbc\x1f\xf8\xdb\xe1\x00\x2e\x50\x81\xaf\xac\x9e\x85\xef\x5e\xa3\x7e\x3a\xfc\xd6\x6d\xf0\x4b\xdd\xaa\x7f\xf3\xe9\xae\x23\x5e\x34\x6d\x0f\x44\x8d\x6b\x69\x18\x98\xc2\x7a\x02\x1b\x84\xa1\x12\xfb\x70\x39\xa5\xb7\xc3\x15\xa5\x21\x6d\xed\xa6\xa9\x41\x11\x35\x48\x60\x0d\x90\xad\x10\x3e\xf4\x5f\x8b\x58\x7b\x53\xd3\x70\x03\x59\x18\xea\xee\xbf\x26\x9f\xac\xc1\x49\xfa\xe6\x75\x30\x20\xbd\x83\x8c\x9b\xd3\xf8\x5a\xb2\x3b\xd8\x04\xfb\x46\x6f\xfa\x33\xd7\xe4\x72\x72\xf6\xbf\x00\x00\x00\xff\xff\x58\x7c\xe8\x75\x61\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 967,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x9e\xe4\x6b\x21\x25\x52\x2e\xdc\xa2\xa6\xad\x22\xb5\x91\xa5\x28\xbd\x8f\x97\x81\xac\xb2\x5f\xdd\x9d\x75\x4d\x51\xfe\x7b\x05\x76\x6c\x68\x32\x27\xe0\xbd\x79\xf3\x76\xf6\x51\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x33\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\xab\x7d\x5d\xbc\x68\xd7\x36\xb8\x3b\xcb\x16\x6f\xf4\xa6\x00\x1c\x59\x6e\x2e\xd3\xc7\x11\xba\x43\xf5\x40\x96\x53\x20\xc5\x78\x7d\x3d\x91\xe6\xd7\x06\xe3\xb8\x46\xc7\x11\xec\xda\x89\x96\x02\xab\x49\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\x1f\xb4\x63\x93\x8e\x1f\xde\x19\x28\x00\x61\x1b\x0c\x09\x9f\x5a\x16\x66\xa7\x32\xab\xee\x8f\xfa\x81\x37\x2b\x33\xee\x5b\x7e\x5c\x99\x98\x6a\xc7\x42\xd5\x4b\xde\x71\x74\x2c\x9c\x2a\xed\xaf\x7c\x6a\x60\xb4\xcb\x87\x13\xe9\xbc\xe4\xf3\xb0\xf2\xc3\x61\x53\xcd\xd7\xb0\x00\x9a\xba\xba\xa9\xae\x3f\xaf\xf1\x6d\x36\x66\xeb\x8d\x56\x43\x83\xfb\xee\xc1\xcb\x36\x72\x9a\xee\xe3\x8d\x45\xb1\x5f\x1c\xac\x44\x69\x71\x53\x5f\x03\xd8\xe0\x27\x1d\xb4\xcd\x76\x9a\xe0\xe3\x30\x65\x21\x27\xfe\x04\xed\x60\xb9\xa7\xdd\x20\x9c\x96\x8d\xf7\xb8\xb1\x58\x35\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5d\xd7\xd8\xe0\x8e\x3b\xca\x46\x10\x7c\xbc\xf8\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\x73\x3a\xc5\xa3\x67\x81\xf1\x7d\x82\xef\xc0\xa4\x9e\x11\xf9\x77\xe6\x24\x20\xd7\x22\x72\x0a\xde\x25\xae\xce\x42\x93\xea\xea\x84\xc7\x7d\x2a\xa3\xd9\xc9\xe5\x00\x8b\xdd\x6f\x7d\x94\xe6\xe8\xee\x14\xcd\xdb\xb6\x7d\x64\x95\xa3\x96\xe1\x8b\x77\xc2\x07\x99\x23\x7a\xac\xb4\x46\x9a\x85\x64\xcc\xee\x36\x3d\x25\x8e\x27\xb9\xff\xa1\xef\xd1\xe7\xf0\x1e\x23\x63\xfc\x9f\x6d\xd4\x7b\x6d\xb8\xe7\xaf\x49\x91\x21\x99\x7f\xaf\x8e\x4c\xe2\x4b\xfc\xff\x05\x00\x00\xff\xff\xec\xf7\xcf\x04\xc7\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
