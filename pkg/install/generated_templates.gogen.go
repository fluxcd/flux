// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7470,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x6f\x1b\x37\x12\x7f\xf7\x5f\x31\x50\xee\x90\x18\x90\x56\x76\xdd\x16\xc5\xf6\x5c\x5c\x9a\x0f\xd7\x97\x26\x35\xec\xe4\x0e\x05\x0a\xd4\x14\x77\xa4\x25\xc4\x25\xf7\x38\x5c\xa9\x82\xd1\xff\xfd\x30\xe4\x7e\x70\x25\xd9\x29\xf2\x76\x79\xa8\x2b\x72\x38\xdf\x9c\xf9\x71\x76\x36\x9b\x9d\x88\x5a\xfd\x1b\x1d\x29\x6b\x72\x10\x75\x4d\xf3\xcd\xf9\xc9\x5a\x99\x22\x87\xd7\x58\x6b\xbb\xab\xd0\xf8\x93\x0a\xbd\x28\x84\x17\xf9\x09\x80\x11\x15\xe6\xb0\xd4\xcd\x1f\x0f\x0f\xa0\x96\x90\x7d\x10\x15\x52\x2d\x24\xc2\x9f\x7f\xb6\xfb\xe1\x67\x0e\x0f\x0f\xe3\xdd\x87\x07\x40\x53\x30\x19\xd5\x28\x99\x99\xc3\x5a\x2b\x29\x28\x87\xf3\x13\x00\x42\x8d\xd2\x5b\xc7\x3b\x00\x95\xf0\xb2\xfc\x59\x2c\x50\x53\x5c\x48\x65\x33\xb5\x77\xc2\xe3\x6a\x17\x37\xfd\xae\xc6\x1c\x6e\x51\x3a\x14\x1e\x4f\x00\x3c\x56\xb5\x16\x1e\x5b\x66\x89\x05\xfc\x4f\x18\x63\xbd\xf0\xca\x9a\x9e\x39\x40\xed\x6c\x85\xbe\xc4\x86\x32\x65\xe7\xb5\x75\x3e\x87\xc9\xc5\xd9\xc5\xf9\x04\x9e\x81\x47\xad\x13\x0a\xf0\x16\x48\x3a\x51\x23\xcc\x2b\xf4\x4e\x49\x62\xe3\x6a\xab\x8c\x7f\x4e\xc0\x87\xb3\x96\xb1\x1e\xd9\xb0\x67\x05\x40\xe7\x8b\xb0\x65\x0b\xbc\x1b\x79\x81\xff\x2d\xd0\x8b\x6c\xdd\x2c\xd0\x19\xf4\x18\x94\xb3\x94\x83\x56\xa6\x65\xc1\xae\x73\x1b\x25\xf1\xa5\x94\xb6\x31\xfe\xc3\x58\x02\xc0\xc6\xea\xa6\xc2\x5e\x87\x59\xab\xc3\x4a\xf9\xd9\x1a\x77\xbd\x20\x62\xf7\xf9\x41\x70\xb7\x32\xf0\x9b\xf1\x91\x22\x64\x46\x42\x55\xe0\x52\x34\xda\xbf\xb7\x05\xe6\x70\xf6\xf5\xd9\x19\x3c\x83\x6d\x89\x06\x2a\xd6\x06\x0b\x70\x28\x8a\x99\x35\x7a\x37\x85\x2d\xc2\xd6\x9a\xe7\x1e\x16\x08\x62\xa1\x91\x1d\x29\xcb\xca\x16\x27\x2d\xc3\x67\xf0\xb1\x54\x04\x8a\x40\x80\xaf\xea\x25\x41\x43\x58\xc0\xd2\x3a\x58\xa1\x41\x27\xbc\x32\x2b\xb8\xbb\xfb\x09\xd6\xb8\xa3\x0c\xae\x0d\xbc\xfb\x8e\xe0\x87\x4b\x38\xcf\xce\xcf\xa6\x3d\x97\x4e\x76\x34\x81\x40\x38\x4c\xf5\x20\xcb\xaa\x18\xc4\x02\x04\x10\xd6\x82\xb3\xa9\x75\x14\x6c\xb1\x67\x23\x85\x81\xad\x53\x9e\x15\xcd\x8e\xfb\x6f\x85\xa6\x77\x06\x56\xb5\xdf\xbd\x56\x2e\x75\x62\x85\x85\x6a\xaa\x1c\xde\x63\x65\xdd\x2e\xb5\x13\x61\x69\xb5\xb6\x5b\xb6\xa8\x15\xad\x28\x98\xda\x10\xaf\x09\x90\x0d\x79\x5b\x29\xf6\xc0\xda\xd8\xad\xf9\xbd\xb4\xe4\xa9\x67\xb1\x54\x1a\xa7\xb0\x2d\x95\x2c\x61\x67\x1b\xd8\x2a\xad\xa3\x51\xde\x42\x61\xf9\x82\xf2\x32\x1f\xe2\xff\x71\x60\xb7\x86\xd5\xee\x19\x38\xac\x2d\x38\xe1\x4b\x74\xe0\x4b\x61\x5a\xc1\x2b\xe5\xcb\x66\x01\x96\x17\x11\xb4\x5a\x63\x06\xbf\xda\xe6\xb9\xd6\x20\x34\xd9\x4e\xc4\xd8\xd9\xa0\x3c\x28\xe3\x6d\x38\x23\xad\xf1\x42\x19\x74\x53\x58\xa0\xb6\xdb\x0c\xee\x70\xf0\x6a\xe9\x7d\x4d\xf9\x7c\x5e\x58\x49\x19\x27\x96\x2c\x38\xad\xd1\xcc\xf9\xce\x92\x9f\xaf\x1a\x55\x20\xcd\x1b\xc2\x59\xed\xd4\x46\x78\x0c\xa9\xc7\x86\x64\xa5\xaf\x74\xcf\xa9\x8b\x05\x51\x39\x93\xd6\x2c\xd5\xaa\xdf\x02\x88\x0b\xef\x45\x9d\x27\x8b\xe9\x0d\x9c\x25\xc7\xbe\x34\x2e\xe1\x6a\xce\x23\x93\x21\xfd\x3e\x1b\x93\xad\xa2\x92\x57\x4a\xb1\x41\x10\x50\xa8\xe5\x12\x1d\x57\xdb\x8e\x43\x7b\xab\x86\x8a\x1a\x42\x10\xd9\xa5\x41\xe0\xaa\xb4\x51\x05\x76\x6e\x5f\xaa\x55\x25\xea\x41\x11\xe5\x4b\x10\x06\xd0\x78\xb7\x0b\x36\xdc\x47\xa2\xfb\x29\x08\x53\x40\x63\xa4\xad\xb8\xcc\x87\xf3\xd1\xda\xf7\x21\x9c\xc2\x14\x3d\x17\x34\x9b\xc0\x41\x21\xb5\xf1\x3c\x88\x00\xbb\xe1\x0b\x22\x90\x1c\xfb\x6c\x04\x42\x25\xf0\x16\x54\xc5\x05\x16\xae\x6e\xae\x42\x11\x80\x17\x6c\x16\xa9\x95\x51\x66\x10\xce\xc6\x6d\xd0\xa9\xa5\x92\xa1\xd2\x43\xdd\xb8\xda\x12\xd2\xe9\x5f\x70\x64\xcf\x25\x96\x8f\xe8\x45\x76\x10\xcb\xfb\x0b\x8e\x03\xe1\x56\xc3\x35\x7d\xc4\x63\xab\x7a\xc5\xf5\x83\x12\xd7\x8c\x4b\xf0\xb3\x47\x8a\xf0\xe1\xb9\x23\x45\xb8\x73\x67\x7f\x13\x0f\xea\x7f\xd2\x21\x5a\xaf\x3b\x0c\x75\xd2\x58\x98\xe4\xf1\x26\x4e\x40\x55\x62\x85\x31\xfb\xf9\x40\x06\x6f\x95\x29\x82\xcd\x15\x97\x15\x87\x72\xc8\xda\x58\x52\x34\x0a\x42\x2e\x1e\xe1\x28\x07\x81\x01\x06\x08\xdf\xdf\xfb\xb2\x59\x64\x85\x95\x6b\x74\x99\xb4\xd5\xdc\xcd\x63\x0d\x08\x7f\xe6\x5e\xf4\xae\xeb\xe2\xc8\x40\x81\x41\x04\x4b\xf5\x62\x05\xac\x69\xd6\xd3\x04\x31\x01\x6f\x30\x20\xb9\xe6\x5f\xb7\x58\x5b\x52\xde\xba\x5d\x04\x1e\x47\x56\x59\x56\x7e\x9e\x9d\x7f\x97\x9d\x31\x32\xd1\xc4\x18\xa5\x55\x4a\xd9\xa0\x4a\x54\x28\x21\x0a\xf0\x25\x95\x73\xd3\x68\x7d\xd7\x76\x98\x80\x7f\x12\x8d\x92\xbd\xfc\xe1\x01\x9c\x30\x2b\x3c\x7a\x8c\x35\xaf\x9d\x32\x7e\x09\x93\xdf\xcc\x6f\xbe\x8b\xcf\xdf\x69\x02\x59\xbb\xdf\x8b\x6e\x21\xd4\x81\xa4\x1b\xab\x95\xdc\xe5\x70\xbd\xfc\x60\xfd\x8d\x43\x4a\xa3\xe2\x90\x6c\xe3\x24\x52\xda\x97\x1c\xfe\xb7\x41\xf2\xa3\x35\x00\x59\x37\x39\x7c\x73\x56\x8d\x16\xab\xd0\xba\x72\xf8\xf6\xeb\xf7\x6a\xc0\x4b\xd6\xa5\x87\x67\x43\xa6\xdd\x04\xec\x74\x71\x76\xc1\x48\x40\x99\xa5\x75\x55\xb8\x82\x42\xf7\xd4\x5a\x6d\xd0\x20\xd1\x8d\xb3\x0b\x4c\x35\xe0\x14\xb9\x1a\xa3\x90\x28\x2a\x32\x1c\x2f\x0b\x5f\xe6\x30\x17\xb5\x8a\x99\xb3\xf9\x76\xae\x0a\x34\x5e\xf9\x5d\x56\x37\x8b\x84\x56\x19\xe5\x95\xd0\xaf\x51\x8b\xdd\x1d\xd7\x9b\x82\x72\xf8\x26\x21\xf0\xaa\x42\xdb\xf8\x23\x7b\x0c\x1a\xd4\xff\x87\xaa\x49\x11\x1a\x05\xe6\x38\xdc\x83\xd8\xb6\x6f\xa2\x66\xe8\x65\x9b\xf3\x44\x25\x03\x5e\x1b\x21\x38\x68\xdb\xd6\xcf\x15\x87\x0c\x94\x89\x39\xf7\x9c\xe2\x19\xa2\x72\x3e\x2a\xfb\x9d\xcf\x7e\x31\x7a\x97\x83\x77\x0d\x32\x37\xc6\x74\xa1\xe2\x2e\xda\x46\xc5\x25\xa2\x46\xb7\xb4\x4e\x22\x33\x8d\x20\x8e\x31\xdc\x63\x8a\xa7\x38\x6b\xac\xfb\x46\xb8\x56\xf7\x48\xf6\x65\xea\x27\x35\xe7\xda\x48\xdd\x84\x4e\xc0\x50\x34\x36\xec\xae\x4b\x44\xac\xf3\x19\x68\xd6\x81\xb3\xef\xf9\xe8\x1e\x6c\xea\xbb\x05\x14\x28\xb5\x70\x0c\x41\x17\x76\x93\x14\xb4\x27\x60\x4d\x2c\xf7\xa9\xf1\xce\x5a\x3f\xcf\x88\xca\x47\x0d\x10\x66\x24\x75\x32\xb4\xdc\x49\x94\x3c\xed\x48\x12\x0e\x68\x36\xca\x59\x13\x1a\x5c\xc4\x0e\x93\x77\x9f\x7e\x7c\xf3\xea\x97\x0f\x6f\xaf\xaf\x26\xb1\xa5\x4d\xd9\x1f\x76\x83\xce\x8d\xf1\x47\xc2\x26\xb4\xec\xc5\x2e\xa2\x03\xaf\x8f\xd9\x78\x00\x1c\x0e\x6d\x1c\x92\x93\x89\x1f\x35\x94\x7b\x38\xbf\xc0\x3a\x69\xdc\x72\x12\x68\xd5\x6a\x17\x62\x92\xb0\xd8\x07\x68\x69\xd0\x03\x3a\xeb\x9e\x12\xc2\x80\xd0\x1e\x9d\xe1\xa7\xc2\x81\xc6\x4b\x67\x2b\x4e\x8b\x0e\x81\x4d\x41\x10\xa7\x5b\x8b\x12\xd8\x0d\xda\xca\x35\x1d\x06\x1b\xcd\x26\x3f\xe2\x97\xc1\xdd\x23\xbf\x6c\x84\x6e\xf0\xc0\x27\x9f\x4b\xe2\xfd\x1c\xe8\x30\xc4\x13\x19\xc0\x10\x66\x0c\x5d\x9e\x00\x2f\x8f\xe4\x25\x53\x45\xb4\x36\xa2\x1b\xd7\x87\xcf\xdd\xbc\xad\x60\x90\x65\x81\x9a\xba\xd6\x3b\xf8\xe9\xe3\xc7\x1b\x58\x08\x52\x12\x44\xe3\x4b\x90\x0e\x43\x25\x15\x3a\xa2\x94\xe1\x7d\xc3\x0c\x37\x4a\x04\xc3\xef\xaf\xae\x3f\xfe\xfe\xf2\xd3\xc7\x9f\x3e\xdd\xbd\xb9\xbd\x0f\xe6\xf6\x4b\xef\xde\xfc\x7a\x3f\x4a\xf8\x8d\x70\x8a\x5f\xa7\xd4\x01\xfe\x84\x61\x84\x63\x7b\xf1\x7b\xeb\x6c\x35\x8e\x61\x24\xbb\xc5\x65\x3e\xb2\x7c\x84\x7d\xb9\xb0\xb1\x09\x83\x03\xd8\xe7\xf9\xc8\x1f\xd1\x05\xf1\xcd\x8d\x05\x77\x62\x29\x64\x89\x05\xa7\x56\x9a\xdb\xfd\x33\x81\x3d\xc5\xdc\xa7\x09\x17\xeb\xda\x77\x40\x72\xa0\x9d\x19\x84\x83\xd3\x20\x84\xdf\xba\xad\x8f\x7d\x89\x94\xe6\xc2\x80\xc6\xfd\xd6\xb2\x96\x0d\xfb\x29\xdc\xb8\x30\x19\x09\x89\x08\xa5\xdd\x86\xf7\xbc\x35\x06\x65\x08\x99\xf2\xe3\xdc\x99\xcd\x7a\x03\xc2\x63\x8e\x85\x5f\xf6\x4b\x59\x0b\x62\x33\xda\xc8\x4c\xea\x86\x3c\xba\x8c\x0b\xb8\x4e\x5d\xf2\x89\x62\xad\x19\x5c\xf1\x2a\x92\x5e\xdf\x8c\x8c\xe2\xb2\x43\xe8\xc3\xbc\x60\x9c\xd9\x83\x0e\x1d\x3d\x67\x97\x77\x4c\x19\x5e\xf0\x49\x0b\x4a\x35\x6e\xa9\x2f\x4f\x46\xa8\x59\x11\x54\x0d\x85\x89\x46\xf0\x9e\xc2\x22\x5e\xa7\x45\x68\x6c\x01\xb3\x86\x41\xc6\x8b\x6e\x3a\x70\x9a\xea\xd2\x15\x97\x78\x0d\x39\x81\x93\x79\xc6\x48\x11\x6e\x06\xb1\xc1\xcd\x0a\xe5\x2e\x0f\xda\x5e\xaa\xd6\x6d\x82\x98\x87\xe0\x7d\xba\xfd\x39\x0e\x5c\x02\x16\xe5\xbd\x2b\xe5\xc3\x10\xa0\x85\xc5\x5d\xb9\x7e\xcb\x48\x3f\x61\xf7\xd4\x9d\xe3\xb4\x49\x6c\x6f\xaf\xcc\xd1\xeb\x94\xde\x85\xee\x2d\xf0\xb7\x17\xe9\xcd\x3c\xcd\x87\xdf\xef\xde\xfc\x7a\xfa\xcf\x38\x8a\x08\xcf\x84\x86\xd0\xcd\x07\x65\xb3\xf4\xa2\xb3\x7f\xf8\x3a\x35\x4e\x5f\x32\xde\xbf\x52\x9e\x8d\x4d\x90\x72\x47\xb1\x70\xc2\xc8\xb2\x23\xfa\x31\xfc\x1a\x50\xfd\x95\x0a\xf5\x8b\x8e\x9d\x64\x0c\xc7\xe7\xee\x42\xa6\xd0\xbf\xac\x32\xc9\x81\xc9\x74\xd2\x22\xf4\xf8\x94\xf8\x8b\x45\xcd\x21\x27\x9e\x8c\xaf\xc8\x4a\x18\xb5\x64\x4c\xce\x77\x88\x54\x81\x2e\x86\x63\xef\xa5\x16\x66\x2c\x96\x10\x1a\x53\xa0\xdb\x8b\xb1\x43\x2d\xbc\xda\x60\x80\x9c\xd4\x65\xe0\x6a\x14\xe7\xbd\x3b\xd9\x1b\x47\xcd\xa2\x50\xee\x7c\x1a\xff\x7e\xb5\xff\xe4\xb9\x52\x3e\x4c\x64\x8f\x39\x27\x8c\x39\x3b\xaf\x76\x54\x47\x18\x7c\x22\x74\xc7\xce\x73\x70\xfb\xc8\x31\x0d\x1c\x3f\xff\xa6\x12\xea\xa8\x02\xc8\x1b\x1d\x87\x8e\x6a\x78\x30\x1d\x0d\x07\x72\x29\xd9\x5a\x76\x28\x9a\x30\x8e\x64\x3f\x71\xc7\x56\x7e\x6f\xa0\x90\xfa\xaa\xed\x7d\x6d\x67\xbb\x7c\xa2\xd5\x75\x27\x5a\x5e\x7c\xea\xf2\x1f\x6b\xdc\x81\x2a\x7e\x78\x0a\xc6\x24\xda\xf0\x51\xe1\x1b\x87\xa3\x69\xc6\x11\x19\x61\x7b\x37\xeb\xe9\x69\x54\xa6\xba\x2a\x0d\xca\x43\x29\x28\xb4\x60\x6b\xf4\x0e\x84\x94\x48\xb1\x92\x97\x18\x07\x82\x2f\xba\xd9\xd3\xfd\x52\x68\xc2\xfb\xd3\x93\x87\x87\x59\x17\x80\xdb\xb6\x77\x1f\x8b\x41\xc7\x34\xd0\x1f\xde\x83\xe3\x64\x47\xe2\x43\xde\x35\xd2\x47\x7d\xb7\x61\x2c\xc1\xd0\xae\xf1\x40\x3b\x23\x61\x61\xed\x7a\x8d\x58\x73\xb6\xf7\xaa\x4e\x56\xca\x4f\xa6\x50\xa1\x60\x47\x73\x21\x03\x11\x66\x05\xed\x05\x68\x6a\xf2\x0e\x45\xd5\xdf\x84\xd3\x3d\xc5\x98\xf5\x8c\xbc\xf0\x78\xc9\x85\xe5\xd1\x7c\x31\xf8\x87\xef\x92\x26\xe9\x74\xc2\xc0\xa4\x93\x31\xe9\xfa\x50\xc2\xe4\x05\x66\xab\x6c\x0a\xff\x41\x46\x94\xaf\xb4\x6d\x8a\xd3\x2c\x0c\xba\xbc\x5d\xf3\xbb\x84\xa0\x16\xce\x2b\xd9\x68\xe1\xba\x60\xb4\x5c\xf6\x5b\x68\x2b\xf5\x72\x4b\x5c\x3f\x25\xf3\xca\xb6\xcc\x37\xdb\x5a\xb7\xa6\xfe\x91\xb9\x77\x2c\x08\xba\x14\x0b\x79\xfe\xd5\xc5\xe1\x7f\x53\x83\xdf\xc4\xec\xeb\xaa\x51\x3f\x78\xb7\xe6\x89\xd4\x78\xdf\x52\x5f\x0d\xc4\x7b\x19\xd2\xf1\x9b\x0d\xfc\x2e\x03\xfe\x7b\x3c\x5b\x8e\x1d\x09\x82\x1f\x49\x9d\x3b\x74\x9b\x23\x9f\x64\xf8\x21\x30\x20\x1f\xbe\xa3\xdf\xa7\x2d\x58\xac\xb9\x7d\xc5\x2c\x23\xf4\xc9\x77\x9e\xe7\xc9\xa7\xa2\xe4\x9b\x0f\x07\x27\x8c\x20\x03\x18\xcf\x46\x56\x6a\x45\x1e\xcd\xac\x55\xe1\x32\xbf\x38\xbb\x38\xef\x9d\x74\x8b\x2b\x45\xde\xed\x5e\x2b\x62\x17\xdf\x49\x61\x42\xba\xee\x79\xca\xb5\x64\xb3\x22\xd2\xcd\xa8\x25\x4c\xcd\x6e\x6b\xe2\xcb\xa2\x50\x71\xb8\xc2\x4d\xfb\x25\x83\xf6\x91\x1b\x87\xfd\x01\xb7\x0d\xe3\xa8\xa7\x4f\xcf\xc2\x47\xbc\x51\x1d\xdd\x1f\x41\x3d\x83\x5f\xea\x96\xfd\xeb\x0f\x77\x1d\xe0\xa2\x69\xfb\x10\x6a\x5c\x0b\xbf\xc0\x14\xd6\x13\xd8\x40\x0c\x95\xd8\x85\xa1\x94\xde\x0c\xa3\x56\x43\xda\xda\x75\x53\x83\x22\x6a\x90\xc0\x1a\x20\x5b\x21\xbc\xeb\x3f\x7d\x31\xf7\xa6\xa6\x61\x92\x5a\x18\xea\xe6\x5e\x93\x0f\xd6\xe0\x24\xdd\x79\x15\x14\x48\x67\xa9\x51\x38\x8d\xc7\xab\xdd\x83\x26\xe8\x37\xda\xe9\xdf\x5a\x93\xf3\xc9\xc9\xff\x02\x00\x00\xff\xff\xf2\x1e\x65\x28\x2e\x1d\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 1121,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x4d\x6f\xdb\x3a\x10\xbc\xeb\x57\x0c\x62\xbc\xdb\xb3\xf2\x14\x20\x17\xdd\x82\x97\xb6\x08\xd0\x06\x46\x83\xf4\x94\xcb\x9a\x5a\x2b\x44\xf8\x55\x72\xe5\xda\x15\xfc\xdf\x0b\x4a\xb2\x2d\x37\xe1\x89\xd2\xcc\xce\x0e\x67\xc9\xe5\x72\x59\x2c\x60\xd9\x2a\x52\xaf\xdc\xa0\xe1\x60\xfc\xde\xb2\x13\x74\x89\x1b\xac\xf7\xf8\x6c\xba\x1d\xc4\x63\x60\x14\x0b\x28\xef\x84\xb4\xe3\x08\x6d\xa9\x65\x58\x16\x6a\x48\xa8\x2c\x28\xe8\x1f\x1c\x93\xf6\xae\x06\x85\x90\xae\xb7\x55\xf1\xa6\x5d\x53\xe3\xfe\x24\x5b\x1c\xe9\x75\x01\x38\xb2\x5c\x9f\xbb\xf7\x3d\xf4\x06\xe5\x23\x59\x4e\x81\x14\xe3\x70\x98\x48\xc3\x67\x8d\xbe\xbf\x44\xfb\x1e\xec\x9a\x4c\x4b\x81\x55\x56\x8c\x1c\x8c\x56\x94\x6a\x54\x05\x90\xd8\xb0\x12\x1f\x33\x02\x58\x12\xf5\xfa\x95\xd6\x6c\xd2\xf8\xe3\x9d\x81\x02\x10\xb6\xc1\x90\xf0\x54\x32\x33\x9b\x97\xb9\xa8\xfe\xa8\x1e\x38\x5a\x19\x70\xdf\xf0\xd3\x85\x89\xbc\xd6\x2c\x54\xbe\x75\x6b\x8e\x8e\x85\x53\xa9\xfd\xb5\x4f\x35\x8c\x76\xdd\x6e\x22\x9d\x42\x3e\x35\x5b\x7e\xd8\x2c\xaf\x61\x0c\x63\x38\x0f\x79\xfb\x9d\x83\x4f\x5a\x7c\xdc\xe3\x70\x38\xd1\xeb\xaa\xbc\x2d\x6f\xfe\x9b\x32\x1e\x88\xab\xce\x98\x27\x56\x91\x25\x8d\x51\xcf\xf4\x66\x58\xdd\xf7\x88\xe4\x5a\xfe\xb0\x2c\xf7\x0d\x51\x3b\xd9\xe0\xea\xc5\xbd\xc8\xd1\xe7\x3f\xe9\x0a\xe5\x84\x8f\x43\x3a\x4f\xeb\x5d\xa7\x95\x37\x5a\xed\x6b\x3c\x6c\x1e\xbd\xac\x22\xa7\x7c\x53\x8e\x2c\x8a\xed\x2c\xf2\x25\x96\x16\xb7\xd5\x0d\x80\x05\xbe\xd1\x4e\xdb\xce\xe6\x50\xf2\x71\xc5\xe7\x5b\xfb\x2f\xb4\x83\xe5\x96\xd6\x7b\xe1\x34\x2f\x7c\xc0\xad\xc5\x45\x61\xd2\xbf\x19\x1b\x1f\xe1\x1d\x43\x0b\xdb\x39\x3d\xa0\xaa\x6e\xaa\x0a\x0b\xdc\xf3\x86\x3a\x23\x08\x3e\x9e\x7d\x2d\x32\x67\xbb\x1d\xb7\xcf\x4e\x79\x3b\xbc\x1b\xf1\x68\x59\x60\x7c\x9b\xe0\x37\x60\x52\xaf\x88\xfc\xb3\xe3\x24\x20\xd7\x20\x72\x0a\xde\x25\x2e\x4f\x42\x59\xf5\xe2\x84\x63\x82\xca\x68\x76\x72\x3e\xc0\xec\x56\xac\x7c\x94\x7a\x74\x37\x0d\xf4\xae\x69\x9e\x58\x75\x51\xcb\xfe\x7f\xef\x84\x77\x32\xcb\x39\x5d\x22\xf5\x4c\x32\x76\xee\x2e\x3d\x27\x8e\x93\xdc\xdf\xd0\x97\xe8\xbb\xf0\x1e\x23\x63\xfc\xaf\x55\xd4\x5b\x6d\xb8\xe5\x4f\x49\x91\x21\x19\x1e\xfe\x86\x4c\xe2\xf3\xa8\xff\x04\x00\x00\xff\xff\x91\x1f\x8a\xdc\x61\x04\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
