// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7510,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x6f\x1b\x37\xf2\x7f\xef\x4f\x31\x50\xfe\x40\x62\x40\x5a\xd9\x75\x5b\x14\xdb\xbf\x8a\x4b\xf3\xe0\xfa\xd2\xa4\x86\x1d\xdf\xa1\xaf\x6a\x8a\x3b\xd2\x12\xe2\x92\x7b\x1c\xae\x54\xc1\xe8\x77\x3f\x0c\xb9\x0f\x5c\x59\x76\x8a\xbc\xbb\xbc\xa8\x6b\xee\x70\x9e\x39\xf3\x9b\xf1\x6c\x36\x3b\x11\xb5\xfa\x17\x3a\x52\xd6\xe4\x20\xea\x9a\xe6\xdb\xf3\x93\x8d\x32\x45\x0e\x6f\xb1\xd6\x76\x5f\xa1\xf1\x27\x15\x7a\x51\x08\x2f\xf2\x13\x00\x23\x2a\xcc\x61\xa5\x9b\x3f\x1f\x1e\x40\xad\x20\xfb\x24\x2a\xa4\x5a\x48\x84\xbf\xfe\x6a\xbf\x87\x5f\x73\x78\x78\x18\x7f\x7d\x78\x00\x34\x05\x93\x51\x8d\x92\x99\x39\xac\xb5\x92\x82\x72\x38\x3f\x01\x20\xd4\x28\xbd\x75\xfc\x05\xa0\x12\x5e\x96\xbf\x8a\x25\x6a\x8a\x07\xa9\x6c\xa6\xf6\x4e\x78\x5c\xef\xe3\x47\xbf\xaf\x31\x87\x1b\x94\x0e\x85\xc7\x13\x00\x8f\x55\xad\x85\xc7\x96\x59\x62\x01\xff\x13\xc6\x58\x2f\xbc\xb2\xa6\x67\x0e\x50\x3b\x5b\xa1\x2f\xb1\xa1\x4c\xd9\x79\x6d\x9d\xcf\x61\x72\x71\x76\x71\x3e\x81\x17\xe0\x51\xeb\x84\x02\xbc\x05\x92\x4e\xd4\x08\xf3\x0a\xbd\x53\x92\xd8\xb8\xda\x2a\xe3\x5f\x12\xf0\xe5\xac\x65\xac\x47\x36\x1c\x58\x01\xd0\xf9\x22\x7c\xb2\x05\xde\x8e\xbc\xc0\xff\x96\xe8\x45\xb6\x69\x96\xe8\x0c\x7a\x0c\xca\x59\xca\x41\x2b\xd3\xb2\x60\xd7\xb9\xad\x92\xf8\x5a\x4a\xdb\x18\xff\x69\x2c\x01\x60\x6b\x75\x53\x61\xaf\xc3\xac\xd5\x61\xad\xfc\x6c\x83\xfb\x5e\x10\xb1\xfb\xfc\x20\xb8\x3b\x19\xf8\xcd\xf8\x4a\x11\x32\x23\xa1\x2a\x70\x25\x1a\xed\x3f\xda\x02\x73\x38\xfb\xf6\xec\x0c\x5e\xc0\xae\x44\x03\x15\x6b\x83\x05\x38\x14\xc5\xcc\x1a\xbd\x9f\xc2\x0e\x61\x67\xcd\x4b\x0f\x4b\x04\xb1\xd4\xc8\x8e\x94\x65\x65\x8b\x93\x96\xe1\x0b\xf8\x5c\x2a\x02\x45\x20\xc0\x57\xf5\x8a\xa0\x21\x2c\x60\x65\x1d\xac\xd1\xa0\x13\x5e\x99\x35\xdc\xde\xfe\x02\x1b\xdc\x53\x06\x57\x06\x3e\xfc\x40\xf0\xd3\x02\xce\xb3\xf3\xb3\x69\xcf\xa5\x93\x1d\x4d\x20\x10\x0e\x53\x3d\xc8\xb2\x2a\x06\xb1\x00\x01\x84\xb5\xe0\x6c\x6a\x1d\x05\x3b\xec\xd9\x48\x61\x60\xe7\x94\x67\x45\xb3\xe3\xfe\x5b\xa3\xe9\x9d\x81\x55\xed\xf7\x6f\x95\x4b\x9d\x58\x61\xa1\x9a\x2a\x87\x8f\x58\x59\xb7\x4f\xed\x44\x58\x59\xad\xed\x8e\x2d\x6a\x45\x2b\x0a\xa6\x36\xc4\x67\x02\x64\x43\xde\x56\x8a\x3d\xb0\x31\x76\x67\xfe\x28\x2d\x79\xea\x59\xac\x94\xc6\x29\xec\x4a\x25\x4b\xd8\xdb\x06\x76\x4a\xeb\x68\x94\xb7\x50\x58\x7e\xa0\x7c\xcc\x97\xf8\x7f\x1c\xd8\x9d\x61\xb5\x7b\x06\x0e\x6b\x0b\x4e\xf8\x12\x1d\xf8\x52\x98\x56\xf0\x5a\xf9\xb2\x59\x82\xe5\x43\x04\xad\x36\x98\xc1\xef\xb6\x79\xa9\x35\x08\x4d\xb6\x13\x31\x76\x36\x28\x0f\xca\x78\x1b\xee\x48\x6b\xbc\x50\x06\xdd\x14\x96\xa8\xed\x2e\x83\x5b\x1c\xbc\x5a\x7a\x5f\x53\x3e\x9f\x17\x56\x52\xc6\x89\x25\x0b\x4e\x6b\x34\x73\x7e\xb3\xe4\xe7\xeb\x46\x15\x48\xf3\x86\x70\x56\x3b\xb5\x15\x1e\x43\xea\xb1\x21\x59\xe9\x2b\xdd\x73\xea\x62\x41\x54\xce\xa4\x35\x2b\xb5\xee\x3f\x01\xc4\x83\x8f\xa2\xce\x93\xc3\xf4\x05\xce\x92\x6b\x5f\x1b\x97\xf0\x34\xe7\x91\xc9\x90\x7e\x5f\x8c\xc9\x4e\x51\xc9\x27\xa5\xd8\x22\x08\x28\xd4\x6a\x85\x8e\xab\x6d\xc7\xa1\x7d\x55\x43\x45\x0d\x21\x88\xec\xd2\x20\x70\x55\xda\xaa\x02\x3b\xb7\xaf\xd4\xba\x12\xf5\xa0\x88\xf2\x25\x08\x03\x68\xbc\xdb\x07\x1b\xee\x23\xd1\xfd\x14\x84\x29\xa0\x31\xd2\x56\x5c\xe6\xc3\xfd\x68\xed\xc7\x10\x4e\x61\x8a\x9e\x0b\x9a\x6d\xe0\xa0\x90\xda\x78\x3e\x8a\x00\xbb\xe1\x2b\x22\x90\x5c\xfb\x62\x04\x42\x25\xf0\x16\x54\xc5\x05\x16\x2e\xaf\x2f\x43\x11\x80\x57\x6c\x16\xa9\xb5\x51\x66\x10\xce\xc6\x6d\xd1\xa9\x95\x92\xa1\xd2\x43\xdd\xb8\xda\x12\xd2\xe9\xdf\x70\x64\xcf\x25\x96\x8f\xe8\x45\x76\x10\xcb\xfb\x1b\x8e\x03\xe1\xd6\xc3\x33\x7d\xc2\x63\xeb\x7a\xcd\xf5\x83\x12\xd7\x8c\x4b\xf0\x8b\x27\x8a\xf0\xe3\x7b\x47\x8a\x70\xe7\xce\xfe\x25\x3e\xaa\xff\x49\x87\x68\xbd\xee\x30\xd4\x49\x63\x61\x92\xc7\x97\x38\x01\x55\x89\x35\xc6\xec\xe7\x0b\x19\xbc\x57\xa6\x08\x36\x57\x5c\x56\x1c\xca\x21\x6b\x63\x49\xd1\x28\x08\xb9\x78\x84\xab\x1c\x04\x06\x18\x20\x7c\xff\xee\xcb\x66\x99\x15\x56\x6e\xd0\x65\xd2\x56\x73\x37\x8f\x35\x20\xfc\x98\x7b\xd1\xbb\xae\x8b\x23\x03\x05\x06\x11\x2c\xd5\x8b\x35\xb0\xa6\x59\x4f\x13\xc4\x04\xbc\xc1\x80\xe4\x8a\x7f\xbb\xc1\xda\x92\xf2\xd6\xed\x23\xf0\x38\x72\xca\xb2\xf2\xf3\xec\xfc\x87\xec\x8c\x91\x89\x26\xc6\x28\xad\x52\xca\xa6\x1a\x25\x54\x11\xbf\x74\x82\x1f\x1e\x66\x83\xc8\xeb\x46\xeb\xdb\xb6\xd9\x24\x34\xea\xe0\x5b\x3e\xba\xed\x84\x59\xe3\xf3\x0c\xba\x68\xb1\x15\x87\xc2\x59\x9f\xd9\xe8\xec\x50\xc5\x5e\xfc\xb5\xd5\x4a\xee\x73\xb8\x5a\x7d\xb2\xfe\xda\x21\xa5\x51\x73\x48\xb6\x71\x12\x29\xed\x5b\x0e\xff\xd3\x20\xf9\xd1\x19\x80\xac\x9b\x1c\xbe\x3b\xab\x46\x87\x55\x68\x6d\x39\x7c\xff\xed\x47\x35\xe0\x29\xeb\xd2\xcb\xb3\x21\x13\xaf\x03\xb6\xba\x38\xbb\x60\xa4\xa0\xcc\xca\xba\x2a\x3c\x51\xa1\x7b\x6a\xad\xb6\x68\x90\xe8\xda\xd9\x25\xa6\x1a\x70\x0a\x5d\x8e\x51\x4a\x14\x15\x19\x8e\x8f\x85\x2f\x73\x98\x8b\x5a\xc5\xcc\xda\x7e\x3f\x57\x05\x1a\xaf\xfc\x3e\xab\x9b\x65\x42\xab\x8c\xf2\x4a\xe8\xb7\xa8\xc5\xfe\x96\xeb\x51\x41\x39\x7c\x97\x10\x78\x55\xa1\x6d\xfc\x91\x6f\x0c\x2a\xd4\xff\x86\xaa\x49\x91\x1a\x05\xe6\x38\x1c\x84\xd8\xd6\xaf\xa3\x66\xe8\x65\xd0\xac\x98\x13\x95\x0c\x88\x6d\x84\xe8\xa0\x6d\x5b\x5f\xd7\x1c\x32\x50\x26\xe6\xdc\x4b\x8a\x77\x88\xca\xf9\xa8\x2d\x74\x3e\xfb\xcd\xe8\x7d\x0e\xde\x35\xc8\xdc\x18\xf3\x85\x8a\xbc\x6c\x1b\x19\x97\x90\x1a\xdd\xca\x3a\x89\xcc\x34\x82\x3c\xc6\x78\x4f\x29\x9e\xe2\xb0\xb1\xee\x5b\xe1\x5a\xdd\x23\xd9\xd7\xa9\x9f\xd4\xa4\x2b\x23\x75\x13\x3a\x05\x43\xd5\xd8\xd0\xbb\x2e\x12\xb1\xd0\x17\xa0\x5b\x07\xde\x7e\xe4\xab\x07\xb0\xaa\xef\x26\x50\xa0\xd4\xc2\x31\x44\x5d\xda\x6d\x52\xf0\x9e\x81\x3d\xb1\x1d\xa4\xc6\x3b\x6b\xfd\x3c\x23\x2a\x9f\x34\x40\x98\x91\xd4\xc9\xd0\x92\x27\x51\xf2\xb4\x23\x49\x38\xa0\xd9\x2a\x67\x4d\x68\x80\x11\x5b\x4c\x3e\xdc\xfd\xfc\xee\xcd\x6f\x9f\xde\x5f\x5d\x4e\x62\xcb\x9b\xb2\x3f\xec\x16\x9d\x1b\xe3\x93\x84\x4d\x68\xe9\xcb\x7d\x44\x0f\x5e\x1f\xb3\xf1\x11\xb0\x78\x6c\xe3\x90\x9c\x4c\xfc\xa4\xa1\xdc\xe3\x79\x42\xeb\xa4\x71\x4b\x4a\xa0\x57\xab\x5d\x88\x49\xc2\xe2\x10\xc0\xa5\x41\x0f\xe8\xad\x1b\x35\x84\x01\xa1\x3d\x3a\xc3\xa3\xc4\x23\x8d\x57\xce\x56\x9c\x16\x1d\x42\x9b\x82\x20\x4e\xb7\x16\x45\xb0\x1b\xb4\x95\x1b\x7a\x1c\x6c\x34\xdb\xfc\x88\x5f\x06\x77\x8f\xfc\xb2\x15\xba\xc1\x47\x3e\xf9\x52\x12\x1f\xe6\x40\x87\x31\x9e\xc9\x00\x86\x38\x63\x68\xf3\x0c\xb8\x79\x22\x2f\x99\x2a\xa2\xb9\x11\xdd\xb8\x3e\x7c\xe9\xe5\xed\x04\x83\x30\x0b\xd4\xd4\xb5\xde\xc3\x2f\x9f\x3f\x5f\xc3\x52\x90\x92\x20\x1a\x5f\x82\x74\x18\x2a\xa9\xd0\x11\xc5\x0c\xf3\x0f\x33\xdc\x2a\x11\x0c\xbf\xbf\xbc\xfa\xfc\xc7\xeb\xbb\xcf\xbf\xdc\xdd\xbe\xbb\xb9\x0f\xe6\xf6\x47\x1f\xde\xfd\x7e\x3f\x4a\xf8\xad\x70\x8a\xa7\x57\xea\x06\x82\x84\x61\x84\x6b\x07\xf1\x7b\xef\x6c\x35\x8e\x61\x24\xbb\xc1\x55\x3e\xb2\x7c\x84\x8d\xb9\xb0\xb1\x09\x83\x03\xd8\xe7\xf9\xc8\x1f\xd1\x05\x71\x26\xc7\x82\x3b\xb1\x14\xb2\xc4\x82\x53\x2b\xcd\xed\x7e\x8c\x60\x4f\x31\xf7\x69\xc2\xc5\xba\x76\x4e\x48\x2e\xb4\x3b\x85\x70\x71\x1a\x84\xf0\x2c\xdc\xfa\xd8\x97\x48\x69\x2e\x0c\x68\xdd\xef\x2c\x6b\xd9\xb0\x9f\xc2\x8b\x0b\x9b\x93\x90\x88\x50\xda\x5d\x98\xf7\xad\x31\x28\x43\xc8\x94\x1f\xe7\xce\x6c\xd6\x1b\x10\x86\x3d\x16\xbe\xe8\x8f\xb2\x16\xe4\x66\xb4\x95\x99\xd4\x0d\x79\x74\x19\x17\x70\x9d\xba\xe4\x8e\x62\xad\x19\x5c\xf1\x26\x92\x5e\x5d\x8f\x8c\xe2\xb2\x43\xe8\xc3\x3e\x61\x9c\xd9\x83\x0e\x1d\x3d\x67\x97\x77\x4c\x19\x26\xfc\xa4\x05\xa5\x1a\xb7\xd4\x8b\x93\x11\xaa\x56\x04\x55\x43\x61\xe3\x11\xbc\xa7\xb0\x88\xcf\x69\x19\x1a\x5b\xc0\xb4\x61\xd1\xf1\xaa\xdb\x1e\x9c\xa6\xba\x74\xc5\x25\x3e\x43\x4e\xe0\x64\xdf\x31\x52\x84\x9b\x41\x6c\x70\xb3\x42\xb9\xc5\xa3\xb6\x97\xaa\x75\x93\x20\xea\x21\x78\x77\x37\xbf\xc6\x85\x4c\x80\xa5\xfc\xed\x52\xf9\xb0\x24\x68\x61\x73\x57\xae\xdf\xf3\x24\x90\xb0\x7b\xee\xcd\x71\xda\x24\xb6\xb7\x4f\xe6\xe8\x73\x4a\xdf\x42\x37\x2b\xfc\xdf\xab\xf4\x65\x9e\xe6\xc3\xef\x1f\xde\xfd\x7e\xfa\x8f\xb8\xaa\x08\x63\x44\x43\xe8\xe6\x83\xb2\x59\xfa\xd0\xd9\x3f\xfc\x9c\x1a\xa7\x17\x8c\xa4\x2f\x95\x67\x63\x47\x38\x3b\x52\x2c\x9d\x30\xb2\xec\x88\x7e\x0e\xbf\xc5\x21\x82\xa1\xfe\xa5\x0a\xf5\x8b\x8e\xdd\x64\x0c\xc7\xf7\x6e\x43\xa6\xd0\x3f\xad\x32\xc9\x85\xc9\x74\xd2\x2e\x41\xe3\xa8\xf1\x37\x8b\x9a\x43\x4e\x3c\x19\xa7\xcc\x4a\x18\xb5\x62\x4c\xce\x6f\x88\x54\x81\x2e\x86\xe3\x60\x92\x0b\x3b\x18\x4b\x08\x8d\x29\xd0\x1d\xc4\xd8\xa1\x16\x5e\x6d\x31\x40\x4e\xea\x32\x70\x3d\x8a\xf3\xc1\x9b\xec\x8d\xa3\x66\x59\x28\x77\x3e\x8d\x3f\xbf\xe9\xc7\x8d\xc1\x39\x61\x63\x7b\xcc\x39\x61\x0d\xda\x79\xb5\xa3\x3a\xc2\xe0\x8e\xd0\x1d\xbb\xcf\xc1\xed\x23\xc7\x34\x70\xfc\xfe\xbb\x4a\xa8\xa3\x0a\x20\x7f\xe8\x38\x74\x54\xc3\xc0\x74\x34\x1c\xc8\xa5\x64\x67\xd9\xa1\x68\xc2\xba\x92\xfd\xc4\x1d\x5b\xf9\x83\x85\x43\xea\xab\xb6\xf7\xb5\x9d\x6d\xf1\x4c\xab\xeb\x6e\xb4\xbc\xf8\xd6\xe2\xff\x37\xb8\x07\x55\xfc\xd4\x93\x3d\x03\x67\x12\xad\x98\x85\xf0\x8d\xc3\xd1\xd6\xe3\x88\xac\xf0\x79\x3f\xeb\xe9\x69\x54\xae\xba\x6a\x0d\xca\x43\x29\x28\xb4\x62\x6b\xf4\x1e\x84\x94\x48\xb1\xa2\x97\x18\x17\x87\xaf\xba\x1d\xd5\xfd\x4a\x68\xc2\xfb\xd3\x93\x6e\x22\xbe\x54\xfe\xa6\xed\xe1\xc7\x62\xd1\x31\x0d\xf4\x8f\xdf\xc3\x71\xb2\x23\x71\x22\xef\x1a\xe9\xa3\xbe\xbb\xb0\xbe\x60\x88\xd7\x78\xa0\xbd\x91\xb0\xb4\x76\xb3\x41\xac\x39\xeb\x7b\x55\x27\x6b\xe5\x27\x53\xa8\x50\xb0\xc3\xb9\xa0\x81\x08\x3b\x85\xf6\x21\x34\x35\x79\x87\xa2\xea\x5f\xc4\xe9\x81\x62\xcc\x7a\x46\x5e\x78\x5c\x70\x81\x79\x32\x6f\x0c\xfe\xe9\xbb\xe4\x49\x3a\x9e\x30\x30\xe9\x64\x4c\xba\x7e\x94\x30\x79\x85\xd9\x3a\x9b\xc2\xbf\x91\x91\xe5\x1b\x6d\x9b\xe2\x34\x0b\x0b\x31\x6f\x37\x3c\x9f\x10\xd4\xc2\x79\x25\x1b\x2d\x5c\x17\x8c\x96\xcb\x61\x2b\x6d\xa5\x2e\x76\xc4\x75\x54\x32\xaf\x6c\xc7\x7c\xb3\x9d\x75\x1b\xea\x87\xcd\x83\x6b\x41\xd0\x42\x2c\xe5\xf9\x37\x17\x8f\xff\x9b\x1a\xfc\x2e\x66\x5f\x57\x95\xfa\x05\xbd\x35\xcf\xa4\xc6\xc7\x96\xfa\x72\x20\x3e\xc8\x90\x8e\xdf\x6c\xe0\xb7\x08\x38\xf0\xe9\x6c\x39\x76\x25\x08\x7e\x22\x75\x6e\xd1\x6d\x8f\xfc\xe9\x86\x07\x82\x01\x01\xf1\x5b\xfd\x31\x6d\xc5\x62\xc3\x6d\x2c\x66\x19\xa1\x4f\xfe\x1e\xf4\x32\xf9\x93\x52\xf2\xb7\x21\x0e\x4e\x58\x55\x06\x50\x9e\x8d\xac\xd4\x8a\x3c\x9a\x59\xab\xc2\x22\xbf\x38\xbb\x38\xef\x9d\x74\x83\x6b\x45\xde\xed\xdf\x2a\x62\x17\xdf\x4a\x61\x42\xba\x1e\x78\xca\xb5\x64\xb3\x22\xd2\xcd\xa8\x25\x4c\xcd\x6e\x6b\xe3\xeb\xa2\x50\x71\xc9\xc2\xcd\xfb\x35\x83\xf7\x91\x1b\x87\xef\x03\x7e\x7b\x78\xe8\x36\x54\xcf\xdf\x9e\x75\xdb\xa9\xa1\x9e\x1e\xae\xa2\x5e\xc0\x6f\x75\xcb\xfe\xed\xa7\xdb\x0e\x78\xd1\xb4\x1d\x88\x1a\xd7\xc2\x30\x30\x85\xf5\x04\x36\x10\x43\x25\xf6\x61\x39\xa5\xb7\xc3\x4a\xd6\x90\xb6\x76\xd3\xd4\xa0\x88\x1a\x24\xb0\x06\xc8\x56\x08\x1f\xfa\x3f\x91\x31\xf7\xa6\xa6\x61\xe3\x5a\x18\xea\xf6\x5f\x93\x4f\xd6\xe0\x24\xfd\xf2\x26\x28\x90\xee\x5c\xa3\x70\x1a\xaf\x61\xbb\xc1\x26\xe8\x37\xfa\xd2\xcf\x5c\x93\xf3\xc9\xc9\x7f\x03\x00\x00\xff\xff\x0d\xf7\xfb\x61\x56\x1d\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 1152,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\x06\xf0\xb5\x52\xaa\x00\xb9\xe8\x16\x34\x6d\x11\xa0\x0d\x8c\x06\xe9\x7d\x4d\xad\x15\x22\x7c\x95\x5c\xb9\x76\x05\xff\x7b\x41\xf9\x25\xd5\x41\x79\x92\xb9\x33\xb3\xc3\x59\xd2\x65\x59\x16\x0b\x58\xb6\x8a\xd4\x2b\xb7\x68\x39\x18\xbf\xb3\xec\x04\x7d\xe2\x16\xab\x1d\xbe\x98\x7e\x0b\xf1\x18\x11\xc5\x02\xca\x3b\x21\xed\x38\x42\x5b\xea\x18\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x27\xc7\xa4\xbd\x6b\x40\x21\xa4\x9b\x4d\x5d\xbc\x69\xd7\x36\x78\x38\xcb\x16\x27\x78\x53\x00\x8e\x2c\x37\x97\xee\xc3\x00\xbd\x46\xf5\x44\x96\x53\x20\xc5\xd8\xef\x8f\xa0\xf1\x67\x83\x61\x98\x57\x87\x01\xec\xda\x0c\x4b\x81\x55\x56\x8c\x1c\x8c\x56\x94\x1a\xd4\x05\x90\xd8\xb0\x12\x1f\x73\x05\xb0\x24\xea\xf5\x1b\xad\xd8\xa4\xc3\xc6\x95\x81\x02\x10\xb6\xc1\x90\xf0\x91\x32\x31\x9b\x97\x99\xb1\xdf\xe3\x03\x27\x2b\x63\xdd\xb7\xfc\x3c\x33\x91\xd7\x8a\x85\xaa\xb7\x7e\xc5\xd1\xb1\x70\xaa\xb4\xbf\xf1\xa9\x81\xd1\xae\xdf\x1e\x41\xe7\x90\xcf\xcd\xca\x77\x9b\xe5\x35\x8e\xe1\x10\xce\x63\xfe\xfc\xc1\xc1\x27\x2d\x3e\xee\xb0\xdf\x9f\xe1\x4d\x5d\xdd\x55\xb7\x1f\xcf\xac\x61\x28\xc7\xb4\x47\xca\xb2\x37\xe6\x99\x55\x64\x49\x87\xd0\x27\xca\x93\x5a\x33\x63\x47\x72\x1d\xff\x5f\xe0\x64\x3a\x7b\x9b\xee\x67\x7a\x9e\x5c\x39\xdb\x3b\x0d\xf3\xaa\xfd\xd2\x1b\xad\x76\x0d\x1e\xd7\x4f\x5e\x96\x91\x53\xbe\x48\x27\x14\xc5\x6e\x62\xac\x44\x69\x71\x57\xdf\x02\x58\xe0\x3b\x6d\xb5\xed\x6d\xce\x2c\xa7\x21\x3e\x5f\xea\x0f\xd0\x0e\x96\x3b\x5a\xed\x84\xd3\x94\xf8\x88\x3b\x8b\x19\x31\xe9\x3f\x8c\xb5\x8f\xf0\x8e\xa1\x85\xed\x14\x1e\x50\xd7\xb7\x75\x8d\x05\x1e\x78\x4d\xbd\x11\x04\x1f\x2f\xbe\x16\x19\xb3\xd9\x1c\x3e\x5f\x9c\xf2\x76\x7c\x56\xe2\xd1\xb1\xc0\xf8\x2e\xc1\xaf\xc1\xa4\x5e\x11\xf9\x57\xcf\x49\x40\xae\x45\xe4\x14\xbc\x4b\x5c\x9d\x85\xb2\xea\xec\x84\x87\x4c\x95\xd1\xec\xe4\x72\x80\xc9\xa5\x59\xfa\x28\xcd\xc1\xdd\xf1\x4d\xdd\xb7\xed\x33\xab\x3e\x6a\xd9\x7d\xf2\x4e\x78\x2b\x93\x9c\xd3\xbc\xd2\x4c\x24\x63\xef\xee\xd3\x4b\xe2\x78\x94\xfb\xb7\xf4\x35\xfa\x3e\x5c\xd7\xc8\x18\xff\x7b\x19\xf5\x46\x1b\xee\xf8\x73\x52\x64\x48\xc6\xff\x85\x35\x99\xc4\x97\x51\xff\x0d\x00\x00\xff\xff\xa9\xcd\xf5\x53\x80\x04\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
