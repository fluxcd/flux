// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7249,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xdd\x6f\x1b\x37\x12\x7f\xf7\x5f\x31\x50\x0e\x48\x0c\x48\x2b\xbb\x6e\x8b\xbb\xed\xa9\xb8\x34\x1f\x6e\x2e\x4d\x6a\xd8\xc9\x1d\xfa\x54\x53\xdc\x91\x96\x10\x97\xdc\xe3\x70\xa5\x0a\x42\xff\xf7\xc3\x90\xfb\xc1\x95\x65\xa7\x28\x9a\x87\xd8\x26\x87\xc3\x99\xdf\x7c\x73\x67\xb3\xd9\x99\xa8\xd5\x7f\xd0\x91\xb2\x26\x07\x51\xd7\x34\xdf\x5e\x9e\x6d\x94\x29\x72\x78\x8d\xb5\xb6\xfb\x0a\x8d\x3f\xab\xd0\x8b\x42\x78\x91\x9f\x01\x18\x51\x61\x0e\x2b\xdd\xfc\x76\x38\x80\x5a\x41\xf6\x51\x54\x48\xb5\x90\x08\xbf\xff\xde\xee\x87\x3f\x73\x38\x1c\xc6\xbb\x87\x03\xa0\x29\x98\x8c\x6a\x94\xcc\xcc\x61\xad\x95\x14\x94\xc3\xe5\x19\x00\xa1\x46\xe9\xad\xe3\x1d\x80\x4a\x78\x59\xfe\x24\x96\xa8\x29\x2e\xa4\x77\x33\xb5\x77\xc2\xe3\x7a\x1f\x37\xfd\xbe\xc6\x1c\x6e\x51\x3a\x14\x1e\xcf\x00\x3c\x56\xb5\x16\x1e\x5b\x66\x89\x06\xfc\x4f\x18\x63\xbd\xf0\xca\x9a\x9e\x39\x40\xed\x6c\x85\xbe\xc4\x86\x32\x65\xe7\xb5\x75\x3e\x87\xc9\xd5\xc5\xd5\xe5\x04\x9e\x81\x47\xad\x13\x0a\xf0\x16\x48\x3a\x51\x23\xcc\x2b\xf4\x4e\x49\x62\xe5\x6a\xab\x8c\x7f\x4e\xc0\x87\xb3\x96\xb1\x1e\xe9\x70\xa4\x05\x40\x87\x45\xd8\xb2\x05\xde\x8d\x50\xe0\x7f\x4b\xf4\x22\xdb\x34\x4b\x74\x06\x3d\x06\xe1\x2c\xe5\xa0\x95\x69\x59\x30\x74\x6e\xab\x24\xbe\x94\xd2\x36\xc6\x7f\x1c\xdf\x00\xb0\xb5\xba\xa9\xb0\x97\x61\xd6\xca\xb0\x56\x7e\xb6\xc1\x7d\x7f\x11\x31\x7c\x7e\xb8\xb8\x5b\x19\xf8\xcd\xf8\x48\x11\x3c\x23\xa1\x2a\x70\x25\x1a\xed\x3f\xd8\x02\x73\xb8\xf8\xfa\xe2\x02\x9e\xc1\xae\x44\x03\x15\x4b\x83\x05\x38\x14\xc5\xcc\x1a\xbd\x9f\xc2\x0e\x61\x67\xcd\x73\x0f\x4b\x04\xb1\xd4\xc8\x40\xca\xb2\xb2\xc5\x59\xcb\xf0\x19\x7c\x2a\x15\x81\x22\x10\xe0\xab\x7a\x45\xd0\x10\x16\xb0\xb2\x0e\xd6\x68\xd0\x09\xaf\xcc\x1a\xee\xee\x7e\x84\x0d\xee\x29\x83\x77\x06\xde\xff\x9d\xe0\xfb\x05\x5c\x66\x97\x17\xd3\x9e\x4b\x77\x77\x54\x81\x40\x38\x4c\xe5\x20\xcb\xa2\x18\xc4\x02\x04\x10\xd6\x82\xbd\xa9\x05\x0a\x76\xd8\xb3\x91\xc2\xc0\xce\x29\xcf\x82\x66\xa7\xf1\x5b\xa3\xe9\xc1\xc0\xaa\xf6\xfb\xd7\xca\xa5\x20\x56\x58\xa8\xa6\xca\xe1\x03\x56\xd6\xed\x53\x3d\x11\x56\x56\x6b\xbb\x63\x8d\xda\xab\x15\x05\x55\x1b\xe2\x35\x01\xb2\x21\x6f\x2b\xc5\x08\x6c\x8c\xdd\x99\x5f\x4b\x4b\x9e\x7a\x16\x2b\xa5\x71\x0a\xbb\x52\xc9\x12\xf6\xb6\x81\x9d\xd2\x3a\x2a\xe5\x2d\x14\x96\x03\x94\x97\xf9\x10\xff\xe2\xc0\xee\x0c\x8b\xdd\x33\x70\x58\x5b\x70\xc2\x97\xe8\xc0\x97\xc2\xb4\x17\xaf\x95\x2f\x9b\x25\x58\x5e\x44\xd0\x6a\x83\x19\xfc\x62\x9b\xe7\x5a\x83\xd0\x64\xbb\x2b\xc6\x60\x83\xf2\xa0\x8c\xb7\xe1\x8c\xb4\xc6\x0b\x65\xd0\x4d\x61\x89\xda\xee\x32\xb8\xc3\x01\xd5\xd2\xfb\x9a\xf2\xf9\xbc\xb0\x92\x32\x76\x2c\x59\xb0\x5b\xa3\x99\x73\xcc\x92\x9f\xaf\x1b\x55\x20\xcd\x1b\xc2\x59\xed\xd4\x56\x78\x0c\xae\xc7\x8a\xf4\x4c\x3a\x33\x10\x95\x33\x69\xcd\x4a\xad\xfb\x2d\x80\xb8\xf0\x41\xd4\x79\xb2\x98\x06\xdf\x2c\x39\xf6\x67\x4d\x12\xa2\x72\x1e\x99\x0c\x9e\xf7\x45\x73\xec\x14\x95\xbc\x52\x8a\x2d\x82\x80\x42\xad\x56\xe8\x38\xd1\x76\x1c\xda\x80\x1a\x92\x69\x40\x3f\xb2\x4b\xf1\xe7\x84\xb4\x55\x05\x76\x88\xaf\xd4\xba\x12\xf5\x20\x88\xf2\x25\x08\x03\x68\xbc\xdb\x07\x1d\xee\x23\xd1\xfd\x14\x84\x29\xa0\x31\xd2\x56\x9c\xe1\xc3\xf9\xa8\xed\x87\x60\x49\x61\x8a\x9e\x0b\x9a\x6d\xe0\xa0\x90\x5a\x53\x3e\xb0\x00\xc3\xf0\x27\x2c\x90\x1c\xfb\xa2\x05\x42\x12\xf0\x16\x54\xc5\xb9\x15\xae\x6f\xae\x43\xfc\xc3\x0b\x56\x8b\xd4\xda\x28\x33\x5c\xce\xca\x6d\xd1\xa9\x95\x92\x21\xc9\x43\xdd\xb8\xda\x12\xd2\xf9\x1f\x00\xb2\xe7\x12\x33\x47\x44\x91\x01\xe2\xfb\xfe\x00\x70\x20\xdc\x7a\x88\xd0\x47\x10\x5b\xd7\x6b\x4e\x1d\x94\x40\x33\xce\xbe\xcf\x1e\xc9\xbf\x0f\xcf\x9d\xc8\xbf\x1d\x9c\x7d\x10\x3e\x48\xfd\x49\x71\x68\x51\x77\x18\x52\xa4\xb1\x30\xc9\x63\x10\x4e\x40\x55\x62\x8d\xd1\xfb\xf9\x40\x06\x6f\x95\x29\x82\xce\x15\x67\x14\x87\x72\xf0\xda\x98\x4d\x34\x0a\x42\xce\x1b\xe1\x28\x1b\x81\x7b\x0b\x10\xbe\x0f\xf9\xb2\x59\x66\x85\x95\x1b\x74\x99\xb4\xd5\xdc\xcd\x63\xf8\x87\x1f\x73\x2f\x7a\xe8\x3a\x3b\x72\x8f\xc0\xfd\x03\xdf\xea\xc5\x1a\x58\xd2\xac\xa7\x09\xd7\xe4\xd0\x32\x54\x36\xe5\x96\x5f\x66\x97\xff\xc8\x2e\xc6\xb4\x37\x8d\xd6\x37\x56\x2b\xb9\xcf\xe1\xdd\xea\xa3\xf5\x37\x0e\x29\xd5\xc2\x21\xd9\xc6\x49\xa4\x34\x85\x3b\xfc\x5f\x83\xe4\x47\x6b\x00\xb2\x6e\x72\xf8\xe6\xa2\x1a\x2d\x56\x21\xcb\xe7\xf0\xed\xd7\x1f\xd4\xd0\x5a\x58\x97\x1e\x9e\x0d\x96\xb9\x09\x6d\xc6\xd5\xc5\x15\x17\x4d\x65\x56\xd6\x55\xc1\x65\x85\xee\xa9\xb5\xda\xa2\x41\xa2\x1b\x67\x97\x98\x4a\xc0\x90\x5e\x8f\x0b\x76\xbc\x2a\x32\x1c\x2f\x0b\x5f\xe6\x30\xef\x78\x25\x7b\xca\x28\xaf\x84\x7e\x8d\x5a\xec\xef\x38\x1e\x0b\xca\xe1\x9b\x84\xc0\xab\x0a\x6d\xe3\x4f\xec\x71\x3d\x55\x7f\x95\x68\xa2\x56\xd1\x09\xb6\xdf\xce\x55\x81\xc6\x2b\xbf\xcf\xea\x66\xf9\xd7\x88\x9a\x04\xe9\xc8\x10\xa7\x3b\x21\x88\x15\xed\x26\x4a\x86\x5e\x06\xc9\x8a\x39\x51\xc9\xbd\xa0\x8d\xdd\x29\x68\xdb\xe6\x97\x35\xc3\x0a\xca\x44\x1f\x7b\x4e\xf1\x0c\x51\x39\x1f\xa5\xc5\x0e\xb3\x9f\x8d\xde\xe7\xe0\x5d\x83\xcc\x8d\xdb\x9d\x90\x91\x96\x6d\x22\xe7\x10\xaa\xd1\xad\xac\x93\xc8\x4c\x63\x7f\xc3\xed\xcd\x63\x82\xa7\x2d\xc8\x58\xf6\xad\x70\xad\xec\x91\xec\xcf\x89\x9f\xc4\xe4\x3b\x23\x75\x13\x32\x25\x77\x69\xb1\xa0\x75\x59\x34\xb6\x01\x5f\xe8\x5a\xba\xbe\xe5\x3b\x3e\x7a\xd4\x51\xf4\xd9\x14\x0a\x94\x5a\x38\xee\xce\x96\x76\x9b\x04\xfc\x13\x65\x3f\xa6\xc3\x54\x79\x67\xad\x9f\x67\x44\xe5\xa3\x0a\x08\x33\xba\x75\x32\x94\xa4\x49\xbc\x79\xda\x91\x24\x1c\xd0\x6c\x95\xb3\x26\x14\x80\x58\x5b\x27\xef\x3f\xff\xf0\xe6\xd5\xcf\x1f\xdf\xbe\xbb\x9e\xc4\x94\x3f\x65\x3c\xec\x16\x9d\x1b\xd7\xe7\x84\x4d\x28\x69\xcb\x7d\xac\x9e\x5e\x9f\xd2\xf1\x41\x61\x7d\xa8\xe3\xe0\x9c\x4c\xfc\xa8\xa2\x5c\xe3\x78\x38\xe9\x6e\xe3\x94\x9c\xb4\x1e\xad\x74\xc1\x26\x09\x8b\xe3\x06\x26\x35\x7a\xe8\x5e\xba\x2e\x5b\x18\x10\xda\xa3\x33\xdc\x45\x3f\x90\x78\xe5\x6c\xc5\x6e\xd1\x75\x28\x53\x10\xc4\xee\xd6\x56\x51\x86\x41\x5b\xb9\xa1\x87\xc6\x46\xb3\xcd\x4f\xe0\x32\xc0\x3d\xc2\x65\x2b\x74\x83\x0f\x30\xf9\x92\x13\x1f\xfb\x40\x57\x63\x9f\xf0\x00\x2e\xf1\xe3\xd2\xfe\x44\x71\x7f\xc4\x2f\x99\x2a\x76\x33\x23\xba\x71\x7e\xf8\x52\xe4\xed\x04\x37\x21\x16\xa8\xa9\x6b\xbd\x87\x1f\x3f\x7d\xba\x81\xa5\x20\x25\x41\x34\xbe\x04\xe9\x30\x64\x52\xa1\x63\x15\x1f\x5a\x7f\x66\xb8\x55\x22\x28\x7e\x7f\xfd\xee\xd3\xaf\x2f\x3f\x7f\xfa\xf1\xf3\xdd\x9b\xdb\xfb\xa0\x6e\xbf\xf4\xfe\xcd\x2f\xf7\x23\x87\xdf\x0a\xa7\x78\x70\xa3\xae\x21\x4e\x18\xc6\x76\xe5\xc8\x7e\x6f\x9d\xad\xc6\x36\x8c\x64\xb7\xb8\xca\x47\x9a\x8f\x7a\x43\x4e\x6c\xac\xc2\x00\x00\x63\x9e\x8f\xf0\x88\x10\xc4\x71\x14\x0b\xae\xbc\x52\xc8\x12\x0b\x76\xad\xd4\xb7\xfb\x36\x9a\x91\x62\xee\xd3\x84\x8b\x75\x6d\x9f\x9c\x1c\x68\xc7\xe9\x70\x70\x1a\x2e\xe1\x31\xb0\xc5\xd8\x97\x48\xa9\x2f\x0c\xdd\xaa\xdf\x59\x96\xb2\x61\x9c\x42\xc4\x85\x47\x83\xe0\x88\x50\xda\x5d\x18\x75\xad\x31\x28\x83\xc9\x94\x1f\xfb\xce\x6c\xd6\x2b\x10\xe6\x1c\xbe\x7c\xd1\x2f\x65\x6d\x93\x97\xd1\x56\x66\x52\x37\xe4\xd1\x65\x9c\xc0\x75\x0a\xc9\x67\x8a\xb9\x66\x80\xe2\x55\x24\x7d\x77\x33\x52\x8a\xd3\x0e\xa1\x0f\xa3\xf4\xd8\xb3\x07\x19\x3a\x7a\xf6\x2e\xef\x98\x32\x0c\xb7\x49\x09\x4a\x25\x6e\xa9\x17\x67\xa3\xae\x52\x11\x54\x0d\x85\x61\x3f\xa0\xa7\xb0\x88\xe1\xb4\x0c\x85\x2d\xf4\x74\x61\xc6\x7f\xd1\x0d\xce\xe7\xa9\x2c\x5d\x72\x89\x61\xc8\x0e\x9c\x8c\xfa\x23\x41\xb8\x18\xc4\x02\x37\x2b\x94\x5b\x3c\x28\x7b\xa9\x58\xb7\x49\x47\x39\x18\xef\xf3\xed\x4f\xf1\x2d\x42\x98\x75\xdc\xbb\x56\x3e\xcc\xc7\xa4\xbc\x75\xfb\x3e\x5d\xbf\xe5\x4e\x38\x61\xf7\x54\xcc\xb1\xdb\x24\xba\xb7\x21\x73\x32\x9c\xd2\x58\xe8\x7a\xe5\xbf\xbd\x48\x23\xf3\x3c\x1f\xfe\x7e\xff\xe6\x97\xf3\x7f\xc5\x29\x3d\xb4\xd1\x0d\xa1\x9b\x0f\xc2\x66\x69\xa0\x33\x3e\x1c\x4e\x8d\xd3\x8b\xc3\x01\xb2\x6b\xe5\x59\xd9\xf0\x5c\x37\xa6\x58\x3a\x61\x64\xd9\x11\xfd\x10\xfe\x8a\x0f\x77\x6a\x15\x96\x38\x7f\xd1\xa9\x93\xdc\xc3\xf1\xb9\xbb\xe0\x29\xf4\x6f\xab\x4c\x72\x60\x32\x9d\xb4\xef\x7f\x9a\x30\x3d\xfe\x74\x52\x73\xc8\x8e\x27\xe3\x94\x55\x09\xa3\x56\xdc\x83\x73\x0c\x91\x2a\xd0\x45\x73\x1c\x4d\x32\xe1\xf9\xc1\x12\x42\x63\x0a\x74\x47\x36\x76\xa8\x85\x57\x5b\x0c\x2d\x27\x75\x1e\xb8\x1e\xd9\xf9\x28\x26\x7b\xe5\xa8\x59\x16\xca\x5d\x4e\xe3\xcf\xaf\xfa\xc7\xcc\x01\x9c\xf0\x58\x79\x0a\x9c\xf0\x02\xd8\xa1\xda\x51\x9d\x60\xf0\x99\xd0\x9d\x3a\xcf\xc6\xed\x2d\xc7\x34\x70\xfa\xfc\x9b\x4a\xa8\x93\x02\x20\x6f\x74\x1c\x3a\xaa\xe1\x39\xf6\xa4\x39\x90\x53\xc9\xce\x32\xa0\x68\xc2\x4b\x1d\xe3\xc4\x15\x5b\xf9\xa3\x81\x3b\xc5\xaa\xad\x7d\x6d\x65\x5b\x3c\x51\xea\xba\x13\x2d\x2f\x3e\xb5\xf8\xe7\x06\xf7\xa0\x8a\xef\x7b\xb2\x27\xda\x99\x44\x2a\x66\x21\x7c\xe3\x70\x34\xf5\x9f\xb8\x2b\x6c\xef\x67\x3d\x3d\x8d\xd2\x55\x97\xad\x41\x79\x28\x05\x85\x52\x6c\x8d\xde\x83\x90\x12\x29\x66\xf4\x12\xe3\x9b\xd9\x8b\xee\x8d\xe6\x7e\x25\x34\xe1\xfd\xf9\xd9\xe1\x30\xeb\x0c\x71\xdb\xd6\xf0\x53\xb6\xe8\x98\x06\xfa\x87\xf1\x70\x9a\xec\x84\x9d\xc8\xbb\x46\xfa\x28\xef\x2e\x8c\xef\xdc\xe2\x35\x1e\x68\x6f\x24\x2c\xad\xdd\x6c\x10\x6b\xf6\xfa\x5e\xd4\xc9\x5a\xf9\xc9\x14\x2a\x14\x0c\x38\x27\x34\x10\x61\xa6\x6e\x03\xa1\xa9\xc9\x3b\x14\x55\x1f\x11\xe7\x47\x82\x31\xeb\x19\x79\xe1\x71\xc1\x09\xe6\x51\xbf\x31\xf8\x9b\xef\x9c\x27\xa9\x78\xc2\xc0\xa4\xbb\x63\xd2\xd5\xa3\x84\xc9\x0b\xcc\xd6\xd9\x14\xfe\x8b\xdc\x59\xbe\xd2\xb6\x29\xce\xb3\xf0\x20\xe4\xed\x86\xe7\x13\x82\x5a\x38\xaf\x64\xa3\x85\xeb\x8c\xd1\x72\x39\x2e\xa5\xed\xad\x8b\x1d\x71\x1e\x95\xcc\x2b\xdb\x31\xdf\x6c\x67\xdd\x86\xfa\x61\xf3\xe8\x58\xb8\x68\x21\x96\xf2\xf2\xab\xab\x87\xff\xa7\x0a\xbf\x89\xde\xd7\x65\xa5\xfe\x6d\xda\x9a\x27\x5c\xe3\x43\x4b\x7d\x3d\x10\x1f\x79\x48\xc7\x6f\x36\xf0\x5b\x84\x3e\xf0\x71\x6f\x39\x75\x24\x5c\xfc\x88\xeb\xdc\xa1\xdb\x9e\xf8\x6a\xc1\x03\xc1\xd0\x01\x71\xac\x7e\x97\x96\x62\xb1\xe1\x32\x16\xbd\x8c\xd0\x27\x9f\x42\x9e\x27\x5f\x53\x92\xcf\x22\x6c\x9c\xf0\x54\x17\x9a\xf2\x6c\xa4\xa5\x56\xe4\xd1\xcc\x5a\x11\x16\xf9\xd5\xc5\xd5\x65\x0f\xd2\x2d\xae\x15\x79\xb7\x7f\xad\x88\x21\xbe\x93\xc2\x04\x77\x3d\x42\xca\xb5\x64\xb3\x22\xd2\xcd\xa8\x25\x4c\xd5\x6e\x73\xe3\xcb\xa2\x50\xf1\x51\x85\x8b\xf7\x4b\x6e\xde\x47\x30\x0e\xfb\x43\xff\x76\x38\x80\x0b\xad\xc0\x17\x4e\xcf\xc2\x77\xae\x51\x3e\x1d\x7e\xeb\x2e\xf8\xb9\x6e\xd9\xbf\xfe\x78\xd7\x35\x5e\x34\x6d\x07\xa2\xc6\xb5\x6d\x18\x98\xc2\x7a\x02\x1b\x88\xa1\x12\xfb\xf0\x18\xa5\xb7\xc3\x93\xa4\x21\x6d\xed\xa6\xa9\x41\x11\x35\x48\x60\x0d\x90\xad\x10\xde\xf7\x5f\x87\x98\x7b\x53\xd3\xf0\xe2\x58\x18\xea\xde\xbb\x26\x1f\xad\xc1\x49\xba\xf3\x2a\x08\x90\xbe\x39\xc6\xcb\x69\xfc\x0c\xd9\x0d\x36\x41\xbe\xd1\x4e\x3f\x73\x4d\x2e\x27\x67\xff\x0f\x00\x00\xff\xff\x16\x3d\x65\xc2\x51\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 967,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x9e\xe4\x6b\x21\x25\x52\x2e\xdc\xa2\xa6\xad\x22\xb5\x91\xa5\x28\xbd\x8f\x97\x81\xac\xb2\x5f\xdd\x9d\x75\x4d\x51\xfe\x7b\x05\x76\x6c\x68\x32\x27\xe0\xbd\x79\xf3\x76\xf6\x51\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x33\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\xab\x7d\x5d\xbc\x68\xd7\x36\xb8\x3b\xcb\x16\x6f\xf4\xa6\x00\x1c\x59\x6e\x2e\xd3\xc7\x11\xba\x43\xf5\x40\x96\x53\x20\xc5\x78\x7d\x3d\x91\xe6\xd7\x06\xe3\xb8\x46\xc7\x11\xec\xda\x89\x96\x02\xab\x49\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\x1f\xb4\x63\x93\x8e\x1f\xde\x19\x28\x00\x61\x1b\x0c\x09\x9f\x5a\x16\x66\xa7\x32\xab\xee\x8f\xfa\x81\x37\x2b\x33\xee\x5b\x7e\x5c\x99\x98\x6a\xc7\x42\xd5\x4b\xde\x71\x74\x2c\x9c\x2a\xed\xaf\x7c\x6a\x60\xb4\xcb\x87\x13\xe9\xbc\xe4\xf3\xb0\xf2\xc3\x61\x53\xcd\xd7\xb0\x00\x9a\xba\xba\xa9\xae\x3f\xaf\xf1\x6d\x36\x66\xeb\x8d\x56\x43\x83\xfb\xee\xc1\xcb\x36\x72\x9a\xee\xe3\x8d\x45\xb1\x5f\x1c\xac\x44\x69\x71\x53\x5f\x03\xd8\xe0\x27\x1d\xb4\xcd\x76\x9a\xe0\xe3\x30\x65\x21\x27\xfe\x04\xed\x60\xb9\xa7\xdd\x20\x9c\x96\x8d\xf7\xb8\xb1\x58\x35\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5d\xd7\xd8\xe0\x8e\x3b\xca\x46\x10\x7c\xbc\xf8\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\x73\x3a\xc5\xa3\x67\x81\xf1\x7d\x82\xef\xc0\xa4\x9e\x11\xf9\x77\xe6\x24\x20\xd7\x22\x72\x0a\xde\x25\xae\xce\x42\x93\xea\xea\x84\xc7\x7d\x2a\xa3\xd9\xc9\xe5\x00\x8b\xdd\x6f\x7d\x94\xe6\xe8\xee\x14\xcd\xdb\xb6\x7d\x64\x95\xa3\x96\xe1\x8b\x77\xc2\x07\x99\x23\x7a\xac\xb4\x46\x9a\x85\x64\xcc\xee\x36\x3d\x25\x8e\x27\xb9\xff\xa1\xef\xd1\xe7\xf0\x1e\x23\x63\xfc\x9f\x6d\xd4\x7b\x6d\xb8\xe7\xaf\x49\x91\x21\x99\x7f\xaf\x8e\x4c\xe2\x4b\xfc\xff\x05\x00\x00\xff\xff\xec\xf7\xcf\x04\xc7\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
