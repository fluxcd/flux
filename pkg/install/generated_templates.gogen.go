// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7462,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x6f\x1b\x37\xf2\x7f\xef\x4f\x31\x50\xfe\x40\x62\x40\x5a\xd9\x75\x5b\x14\xdb\xbf\x8b\x4b\xf3\xe0\xfa\xd2\xa4\x86\x1d\xdf\xa1\xaf\x6a\x8a\x3b\xd2\x12\xe2\x92\x7b\x1c\xae\x54\xc1\xc8\x77\x3f\x0c\xb9\x0f\x5c\x49\x76\x8a\xbe\x3b\xbf\x88\x22\x72\x38\xcf\x9c\xf9\x71\x34\x9b\xcd\x4e\x44\xad\xfe\x85\x8e\x94\x35\x39\x88\xba\xa6\xf9\xe6\xfc\x64\xad\x4c\x91\xc3\x5b\xac\xb5\xdd\x55\x68\xfc\x49\x85\x5e\x14\xc2\x8b\xfc\x04\xc0\x88\x0a\x73\x58\xea\xe6\xcf\xc7\x47\x50\x4b\xc8\x3e\x89\x0a\xa9\x16\x12\xe1\xcb\x97\x76\x3f\x7c\xcd\xe1\xf1\x71\xbc\xfb\xf8\x08\x68\x0a\x26\xa3\x1a\x25\x33\x73\x58\x6b\x25\x05\xe5\x70\x7e\x02\x40\xa8\x51\x7a\xeb\x78\x07\xa0\x12\x5e\x96\xbf\x8a\x05\x6a\x8a\x0b\xa9\x6c\xa6\xf6\x4e\x78\x5c\xed\xe2\xa6\xdf\xd5\x98\xc3\x2d\x4a\x87\xc2\xe3\x09\x80\xc7\xaa\xd6\xc2\x63\xcb\x2c\xb1\x80\xff\x84\x31\xd6\x0b\xaf\xac\xe9\x99\x03\xd4\xce\x56\xe8\x4b\x6c\x28\x53\x76\x5e\x5b\xe7\x73\x98\x5c\x9c\x5d\x9c\x4f\xe0\x05\x78\xd4\x3a\xa1\x00\x6f\x81\xa4\x13\x35\xc2\xbc\x42\xef\x94\x24\x36\xae\xb6\xca\xf8\x97\x04\x7c\x38\x6b\x19\xeb\x91\x0d\x7b\x56\x00\x74\xbe\x08\x5b\xb6\xc0\xbb\x91\x17\xf8\x6f\x81\x5e\x64\xeb\x66\x81\xce\xa0\xc7\xa0\x9c\xa5\x1c\xb4\x32\x2d\x0b\x76\x9d\xdb\x28\x89\xaf\xa5\xb4\x8d\xf1\x9f\xc6\x12\x00\x36\x56\x37\x15\xf6\x3a\xcc\x5a\x1d\x56\xca\xcf\xd6\xb8\xeb\x05\x11\xbb\xcf\x0f\x82\xbb\x95\x81\xdf\x8c\x8f\x14\x21\x33\x12\xaa\x02\x97\xa2\xd1\xfe\xa3\x2d\x30\x87\xb3\x6f\xcf\xce\xe0\x05\x6c\x4b\x34\x50\xb1\x36\x58\x80\x43\x51\xcc\xac\xd1\xbb\x29\x6c\x11\xb6\xd6\xbc\xf4\xb0\x40\x10\x0b\x8d\xec\x48\x59\x56\xb6\x38\x69\x19\xbe\x80\xcf\xa5\x22\x50\x04\x02\x7c\x55\x2f\x09\x1a\xc2\x02\x96\xd6\xc1\x0a\x0d\x3a\xe1\x95\x59\xc1\xdd\xdd\x2f\xb0\xc6\x1d\x65\x70\x6d\xe0\xc3\x0f\x04\x3f\x5d\xc2\x79\x76\x7e\x36\xed\xb9\x74\xb2\xa3\x09\x04\xc2\x61\xaa\x07\x59\x56\xc5\x20\x16\x20\x80\xb0\x16\x9c\x4d\xad\xa3\x60\x8b\x3d\x1b\x29\x0c\x6c\x9d\xf2\xac\x68\x76\xdc\x7f\x2b\x34\xbd\x33\xb0\xaa\xfd\xee\xad\x72\xa9\x13\x2b\x2c\x54\x53\xe5\xf0\x11\x2b\xeb\x76\xa9\x9d\x08\x4b\xab\xb5\xdd\xb2\x45\xad\x68\x45\xc1\xd4\x86\x78\x4d\x80\x6c\xc8\xdb\x4a\xb1\x07\xd6\xc6\x6e\xcd\x1f\xa5\x25\x4f\x3d\x8b\xa5\xd2\x38\x85\x6d\xa9\x64\x09\x3b\xdb\xc0\x56\x69\x1d\x8d\xf2\x16\x0a\xcb\x17\x94\x97\xf9\x10\xff\xc7\x81\xdd\x1a\x56\xbb\x67\xe0\xb0\xb6\xe0\x84\x2f\xd1\x81\x2f\x85\x69\x05\xaf\x94\x2f\x9b\x05\x58\x5e\x44\xd0\x6a\x8d\x19\xfc\x6e\x9b\x97\x5a\x83\xd0\x64\x3b\x11\x63\x67\x83\xf2\xa0\x8c\xb7\xe1\x8c\xb4\xc6\x0b\x65\xd0\x4d\x61\x81\xda\x6e\x33\xb8\xc3\xc1\xab\xa5\xf7\x35\xe5\xf3\x79\x61\x25\x65\x9c\x58\xb2\xe0\xb4\x46\x33\xe7\x3b\x4b\x7e\xbe\x6a\x54\x81\x34\x6f\x08\x67\xb5\x53\x1b\xe1\x31\xa4\x1e\x1b\x92\x95\xbe\xd2\x3d\xa7\x2e\x16\x44\xe5\x4c\x5a\xb3\x54\xab\x7e\x0b\x20\x2e\x7c\x14\x75\x9e\x2c\xa6\x37\x70\x96\x1c\xfb\xbb\x71\x09\x57\x73\x1e\x99\x0c\xe9\xf7\xd5\x98\x6c\x15\x95\xbc\x52\x8a\x0d\x82\x80\x42\x2d\x97\xe8\xb8\xda\x76\x1c\xda\x5b\x35\x54\xd4\x10\x82\xc8\x2e\x0d\x02\x57\xa5\x8d\x2a\xb0\x73\xfb\x52\xad\x2a\x51\x0f\x8a\x28\x5f\x82\x30\x80\xc6\xbb\x5d\xb0\xe1\x21\x12\x3d\x4c\x41\x98\x02\x1a\x23\x6d\xc5\x65\x3e\x9c\x8f\xd6\x7e\x0c\xe1\x14\xa6\xe8\xb9\xa0\xd9\x04\x0e\x0a\xa9\x8d\xe7\x41\x04\xd8\x0d\x7f\x23\x02\xc9\xb1\xaf\x46\x20\x54\x02\x6f\x41\x55\x5c\x60\xe1\xea\xe6\x2a\x14\x01\x78\xc5\x66\x91\x5a\x19\x65\x06\xe1\x6c\xdc\x06\x9d\x5a\x2a\x19\x2a\x3d\xd4\x8d\xab\x2d\x21\x9d\xfe\x05\x47\xf6\x5c\x62\xf9\x88\x5e\x64\x07\xb1\xbc\xbf\xe0\x38\x10\x6e\x35\x5c\xd3\x27\x3c\xb6\xaa\x57\x5c\x3f\x28\x71\xcd\xb8\x04\xbf\x78\xa2\x08\x1f\x9e\x3b\x52\x84\x3b\x77\xf6\x37\xf1\xa0\xfe\x27\x1d\xa2\xf5\xba\xc3\x50\x27\x8d\x85\x49\x1e\x6f\xe2\x04\x54\x25\x56\x18\xb3\x9f\x0f\x64\xf0\x5e\x99\x22\xd8\x5c\x71\x59\x71\x28\x87\xac\x8d\x25\x45\xa3\x20\xe4\xe2\x11\x8e\x72\x10\x18\x60\x80\xf0\xfd\xbd\x2f\x9b\x45\x56\x58\xb9\x46\x97\x49\x5b\xcd\xdd\x3c\xd6\x80\xf0\x31\xf7\xa2\x77\x5d\x17\x47\x06\x0a\x0c\x22\x58\xaa\x17\x2b\x60\x4d\xb3\x9e\x26\x88\x09\x78\x83\x01\xc9\x35\x7f\xbb\xc5\xda\x92\xf2\xd6\xed\x22\xf0\x38\xb2\xca\xb2\xf2\xf3\xec\xfc\x87\xec\x8c\x91\x89\x26\xc6\x28\xad\x52\xca\x06\x55\xa2\x42\x09\x51\x80\x2f\xa9\x9c\x9b\x46\xeb\xbb\xb6\xc3\x04\xfc\x93\x68\x94\xec\xe5\x8f\x8f\xe0\x84\x59\xe1\xf3\xc7\xba\xc0\xb0\xc2\xf0\xe5\x0b\xa4\x22\x5b\xe8\x74\x20\xe1\xc6\x6a\x25\x77\x39\x5c\x2f\x3f\x59\x7f\xe3\x90\xd2\x68\x38\x24\xdb\x38\x89\x94\xf6\x23\x87\xff\x69\x90\xfc\x68\x0d\x40\xd6\x4d\x0e\xdf\x9d\x55\xa3\xc5\x2a\xb4\xac\x1c\xbe\xff\xf6\xa3\x1a\x70\x92\x75\xe9\xe1\xd9\x90\x61\x37\x01\x33\x5d\x9c\x5d\x30\x02\x50\x66\x69\x5d\x15\xae\x9e\xd0\x3d\xb5\x56\x1b\x34\x48\x74\xe3\xec\x02\x53\x0d\x38\x35\xae\xc6\xe8\x23\x8a\x8a\x0c\xc7\xcb\xc2\x97\x39\xcc\x45\xad\x62\xc6\x6c\xbe\x9f\xab\x02\x8d\x57\x7e\x97\xd5\xcd\x22\xa1\x55\x46\x79\x25\xf4\x5b\xd4\x62\x77\xc7\x75\xa6\xa0\x1c\xbe\x4b\x08\xbc\xaa\xd0\x36\xfe\xc8\x1e\x83\x05\xf5\xbf\xa1\x6a\x52\x7c\x46\x81\x39\x0e\xf3\x20\xb6\xeb\x9b\xa8\x19\x7a\xd9\xe6\x3a\x51\xc9\x40\xd7\x46\xe8\x0d\xda\xb6\x75\x73\xc5\x21\x03\x65\x62\xce\xbd\xa4\x78\x86\xa8\x9c\x8f\xca\x7d\xe7\xb3\xdf\x8c\xde\xe5\xe0\x5d\x83\xcc\x8d\xb1\x5c\xa8\xb4\x8b\xb6\x41\x71\x69\xa8\xd1\x2d\xad\x93\xc8\x4c\x23\x78\x63\xec\xf6\x94\xe2\x29\xbe\x1a\xeb\xbe\x11\xae\xd5\x3d\x92\xfd\x3d\xf5\x93\x5a\x73\x6d\xa4\x6e\x42\x07\x60\x08\x1a\x1b\x75\xd7\x1d\x22\xc6\xf9\x0a\x24\xeb\x40\xd9\x8f\x7c\x74\x0f\x2e\xf5\x5d\x02\x0a\x94\x5a\x38\x86\x9e\x0b\xbb\x49\x0a\xd9\x33\x70\x26\x96\xf9\xd4\x78\x67\xad\x9f\x67\x44\xe5\x93\x06\x08\x33\x92\x3a\x19\x5a\xed\x24\x4a\x9e\x76\x24\x09\x07\x34\x1b\xe5\xac\x09\x8d\x2d\x62\x86\xc9\x87\xfb\x9f\xdf\xbd\xf9\xed\xd3\xfb\xeb\xab\x49\x6c\x65\x53\xf6\x87\xdd\xa0\x73\x63\xdc\x91\xb0\x09\xad\x7a\xb1\x8b\xa8\xc0\xeb\x63\x36\x1e\x00\x86\x43\x1b\x87\xe4\x64\xe2\x27\x0d\xe5\xde\xcd\x2f\xaf\x4e\x1a\xb7\x9a\x04\x52\xb5\xda\x85\x98\x24\x2c\xf6\x81\x59\x1a\xf4\x80\xca\xba\x27\x84\x30\x20\xb4\x47\x67\xf8\x89\x70\xa0\xf1\xd2\xd9\x8a\xd3\xa2\x43\x5e\x53\x10\xc4\xe9\xd6\xa2\x03\x76\x83\xb6\x72\x4d\x87\xc1\x46\xb3\xc9\x8f\xf8\x65\x70\xf7\xc8\x2f\x1b\xa1\x1b\x3c\xf0\xc9\xd7\x92\x78\x3f\x07\x3a\xec\xf0\x4c\x06\x30\x74\x19\x43\x96\x67\x40\xcb\x13\x79\xc9\x54\x11\xa5\x8d\xe8\xc6\xf5\xe1\x6b\x37\x6f\x2b\x18\x5c\x59\xa0\xa6\xae\xf5\x0e\x7e\xf9\xfc\xf9\x06\x16\x82\x94\x04\xd1\xf8\x12\xa4\xc3\x50\x49\x85\x8e\xe8\x64\x78\xd7\x30\xc3\x8d\x12\xc1\xf0\x87\xab\xeb\xcf\x7f\xbc\xbe\xff\xfc\xcb\xfd\xdd\xbb\xdb\x87\x60\x6e\xbf\xf4\xe1\xdd\xef\x0f\xa3\x84\xdf\x08\xa7\xf8\x55\x4a\x1d\xd0\x4f\x18\x46\x18\xb6\x17\xbf\xf7\xce\x56\xe3\x18\x46\xb2\x5b\x5c\xe6\x23\xcb\x47\x98\x97\x0b\x1b\x9b\x30\x38\x80\x7d\x9e\x8f\xfc\x11\x5d\x10\xdf\xda\x58\x70\x27\x96\x42\x96\x58\x70\x6a\xa5\xb9\xdd\x3f\x0f\xd8\x53\xcc\x7d\x9a\x70\xb1\xae\xc5\xff\xc9\x81\x76\x56\x10\x0e\x4e\x83\x10\x7e\xe3\xb6\x3e\xf6\x25\x52\x9a\x0b\x03\x0a\xf7\x5b\xcb\x5a\x36\xec\xa7\x70\xe3\xc2\x44\x24\x24\x22\x94\x76\x1b\xde\xf1\xd6\x18\x94\x21\x64\xca\x8f\x73\x67\x36\xeb\x0d\x08\x8f\x38\x16\x7e\xd9\x2f\x65\x2d\x78\xcd\x68\x23\x33\xa9\x1b\xf2\xe8\x32\x2e\xe0\x3a\x75\xc9\x3d\xc5\x5a\x33\xb8\xe2\x4d\x24\xbd\xbe\x19\x19\xc5\x65\x87\xd0\x87\x39\xc1\x38\xb3\x07\x1d\x3a\x7a\xce\x2e\xef\x98\x32\xbc\xdc\x93\x16\x94\x6a\xdc\x52\x5f\x9e\x8c\xd0\xb2\x22\xa8\x1a\x0a\x93\x8c\xe0\x3d\x85\x45\xbc\x4e\x8b\xd0\xd8\x02\x56\x0d\x03\x8c\x57\xdd\x54\xe0\x34\xd5\xa5\x2b\x2e\xf1\x1a\x72\x02\x27\x73\x8c\x91\x22\xdc\x0c\x62\x83\x9b\x15\xca\x5d\x1e\xb4\xbd\x54\xad\xdb\x04\x29\x0f\xc1\xbb\xbf\xfd\x35\x0e\x5a\x02\x06\xe5\xbd\x2b\xe5\xc3\xe3\xbf\x85\xc3\x5d\xb9\x7e\xcf\x08\x3f\x61\xf7\xdc\x9d\xe3\xb4\x49\x6c\x6f\xaf\xcc\xd1\xeb\x94\xde\x85\xee\x0d\xf0\x7f\xaf\xd2\x9b\x79\x9a\x0f\xdf\x3f\xbc\xfb\xfd\xf4\x1f\x71\x04\x11\x9e\x07\x0d\xa1\x9b\x0f\xca\x66\xe9\x45\x67\xff\xf0\x75\x6a\x9c\xbe\x64\xd8\x7c\xa5\x3c\x1b\x3b\x02\xd5\x91\x62\xe1\x84\x91\x65\x47\xf4\x73\xf8\x36\xa0\xf9\x2b\x15\xea\x17\x1d\x3b\xc9\x18\x8e\xcf\xdd\x85\x4c\xa1\x7f\x5a\x65\x92\x03\x93\xe9\xa4\x45\xe8\xf1\x09\xf1\x17\x8b\x9a\x43\x4e\x3c\x19\x5f\x8f\x95\x30\x6a\xc9\x98\x9c\xef\x10\xa9\x02\x5d\x0c\xc7\xde\x0b\x2d\xcc\x56\x2c\x21\x34\xa6\x40\xb7\x17\x63\x87\x5a\x78\xb5\xc1\x00\x39\xa9\xcb\xc0\xd5\x28\xce\x7b\x77\xb2\x37\x8e\x9a\x45\xa1\xdc\xf9\x34\x7e\x7e\xb3\xff\xd4\xb9\x52\x3e\x4c\x62\x8f\x39\x27\x8c\x37\x3b\xaf\x76\x54\x47\x18\xdc\x13\xba\x63\xe7\x39\xb8\x7d\xe4\x98\x06\x8e\x9f\x7f\x57\x09\x75\x54\x01\xe4\x8d\x8e\x43\x47\x35\x3c\x98\x8e\x86\x03\xb9\x94\x6c\x2d\x3b\x14\x4d\x18\x43\xb2\x9f\xb8\x63\x2b\xbf\x37\x48\x48\x7d\xd5\xf6\xbe\xb6\xb3\x5d\x3e\xd3\xea\xba\x13\x2d\x2f\x3e\x75\xf9\xff\x6b\xdc\x81\x2a\x7e\x7a\x0e\xc6\x24\xda\xf0\x51\xe1\x1b\x87\xa3\x29\xc6\x11\x19\x61\x7b\x37\xeb\xe9\x69\x54\xa6\xba\x2a\x0d\xca\x43\x29\x28\xb4\x60\x6b\xf4\x0e\x84\x94\x48\xb1\x92\x97\x18\x07\x81\xaf\xba\x99\xd3\xc3\x52\x68\xc2\x87\xd3\x93\xc7\xc7\x59\x17\x80\xdb\xb6\x77\x1f\x8b\x41\xc7\x34\xd0\x1f\xde\x83\xe3\x64\x47\xe2\x43\xde\x35\xd2\x47\x7d\xb7\x61\x1c\xc1\xd0\xae\xf1\x40\x3b\x23\x61\x61\xed\x7a\x8d\x58\x73\xb6\xf7\xaa\x4e\x56\xca\x4f\xa6\x50\xa1\x60\x47\x73\x21\x03\x11\x66\x04\xed\x05\x68\x6a\xf2\x0e\x45\xd5\xdf\x84\xd3\x3d\xc5\x98\xf5\x8c\xbc\xf0\x78\xc9\x85\xe5\xc9\x7c\x31\xf8\xa7\xef\x92\x26\xe9\x74\xc2\xc0\xa4\x93\x31\xe9\xfa\x50\xc2\xe4\x15\x66\xab\x6c\x0a\xff\x46\x46\x94\x6f\xb4\x6d\x8a\xd3\x2c\x0c\xb8\xbc\x5d\xf3\xbb\x84\xa0\x16\xce\x2b\xd9\x68\xe1\xba\x60\xb4\x5c\xf6\x5b\x68\x2b\xf5\x72\x4b\x5c\x3f\x25\xf3\xca\xb6\xcc\x37\xdb\x5a\xb7\xa6\xfe\x91\xb9\x77\x2c\x08\xba\x14\x0b\x79\xfe\xcd\xc5\xe1\xbf\xa9\xc1\xef\x62\xf6\x75\xd5\xa8\x1f\xb8\x5b\xf3\x4c\x6a\x7c\x6c\xa9\xaf\x06\xe2\xbd\x0c\xe9\xf8\xcd\x06\x7e\x97\x01\xff\x3d\x9d\x2d\xc7\x8e\x04\xc1\x4f\xa4\xce\x1d\xba\xcd\x91\x9f\x62\xf8\x21\x30\x20\x1f\xbe\xa3\x3f\xa6\x2d\x58\xac\xb9\x7d\xc5\x2c\x23\xf4\xc9\xef\x3b\x2f\x93\x9f\x88\x92\xdf\x7a\x38\x38\x61\xf4\x18\xc0\x78\x36\xb2\x52\x2b\xf2\x68\x66\xad\x0a\x97\xf9\xc5\xd9\xc5\x79\xef\xa4\x5b\x5c\x29\xf2\x6e\xf7\x56\x11\xbb\xf8\x4e\x0a\x13\xd2\x75\xcf\x53\xae\x25\x9b\x15\x91\x6e\x46\x2d\x61\x6a\x76\x5b\x13\x5f\x17\x85\x8a\xc3\x15\x6e\xda\xaf\x19\xb4\x8f\xdc\x38\xec\x0f\xb8\x6d\x18\x43\x3d\x7f\x7a\xd6\x8d\xa0\x86\x3a\xba\x3f\x82\x7a\x01\xbf\xd5\x2d\xfb\xb7\x9f\xee\x3a\xc0\x45\xd3\xf6\x21\xd4\xb8\x16\x7e\x81\x29\xac\x27\xb0\x81\x18\x2a\xb1\x0b\x43\x29\xbd\x19\x46\xac\x86\xb4\xb5\xeb\xa6\x06\x45\xd4\x20\x81\x35\x40\xb6\x42\xf8\xd0\xff\xe4\xc5\xdc\x9b\x9a\x86\x09\x6a\x61\xa8\x9b\x7b\x4d\x3e\x59\x83\x93\x74\xe7\x4d\x50\x20\x9d\xa1\x46\xe1\x34\x1e\xab\x76\x0f\x9a\xa0\xdf\x68\xa7\x7f\x6b\x4d\xce\x27\x27\xff\x0d\x00\x00\xff\xff\x41\xbe\xb1\xcd\x26\x1d\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 1113,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\x06\xf0\xb5\x56\xaa\x00\xb9\xe8\x16\x34\x6d\x11\xa0\x0d\x8c\x06\xe9\x7d\x4d\xad\x15\x22\x24\x57\x25\x57\xae\x5d\xc1\xff\x5e\x50\x7e\xc9\x75\x50\x9e\x28\xcd\xec\xec\x70\x96\x9c\xcf\xe7\xc5\x0c\x9e\xbd\x21\xf3\xca\x0d\x1a\xee\x9c\x6c\x3d\x07\x45\x9f\xb8\xc1\x72\x8b\x2f\xae\xdf\x40\x05\x23\xa3\x98\xc1\x48\x50\xb2\x81\x23\xac\xa7\x96\xe1\x59\xa9\x21\xa5\xb2\xa0\xce\xfe\xe4\x98\xac\x84\x1a\xd4\x75\xe9\x66\x5d\x15\x6f\x36\x34\x35\x1e\x4e\xb2\xc5\x91\x5e\x17\x40\x20\xcf\xf5\xb9\xfb\x30\xc0\xae\x50\x3e\x91\xe7\xd4\x91\x61\xec\x76\x07\xd2\xf8\x59\x63\x18\x2e\xd1\x61\x00\x87\x26\xd3\x52\xc7\x26\x2b\x46\xee\x9c\x35\x94\x6a\x54\x05\x90\xd8\xb1\x51\x89\x19\x01\x3c\xa9\x79\xfd\x46\x4b\x76\x69\xff\xe3\xca\x40\x01\x28\xfb\xce\x91\xf2\xa1\x64\x62\x36\x2f\x77\x51\xfd\x5e\x3d\x70\xb4\x32\xe2\xd2\xf0\xf3\x85\x89\xbc\x96\xac\x54\xbe\xf5\x4b\x8e\x81\x95\x53\x69\xe5\x46\x52\x0d\x67\x43\xbf\x39\x90\x4e\x21\x9f\x9a\xcd\xdf\x6d\x96\xd7\x38\x86\x7d\x38\x8f\x79\xfb\x83\x3b\x49\x56\x25\x6e\xb1\xdb\x9d\xe8\x75\x55\xde\x95\xb7\x1f\x0f\x19\x8f\xc4\x45\xef\xdc\x33\x9b\xc8\x9a\xf6\x51\x4f\xf4\x26\x58\x3d\x0c\x88\x14\x5a\xfe\x7f\xd9\xd1\x60\xf6\x81\xdd\x0e\xa7\xe1\x9c\xa7\x74\xd5\x61\x21\xce\x9a\x6d\x8d\xc7\xd5\x93\xe8\x22\x72\xca\x37\xe4\xc8\xa2\xd8\x4e\xa2\x9e\x63\xee\x71\x57\xdd\x02\x98\xe1\x3b\x6d\xac\xef\x7d\x0e\x23\x1f\x53\x25\xdf\xd6\x0f\xb0\x01\x9e\x5b\x5a\x6e\x95\xd3\xb4\xf0\x11\x77\x1e\x17\x85\xc9\xfe\x61\xac\x24\x42\x02\xc3\x2a\xfb\x29\xbd\x43\x55\xdd\x56\x15\x66\x78\xe0\x15\xf5\x4e\xd1\x49\x3c\xfb\x9a\x65\xce\x7a\xbd\xdf\xbe\x04\x23\x7e\x7c\x2f\x2a\x68\x59\xe1\xa4\x4d\x90\x15\x98\xcc\x2b\x22\xff\xea\x39\x29\x28\x34\x88\x9c\x3a\x09\x89\xcb\x93\x50\x56\xbd\x38\xe1\x3e\x40\xe3\x2c\x07\x3d\x1f\x60\x72\x1b\x16\x12\xb5\xde\xbb\x3b\x0c\xf2\xbe\x69\x9e\xd9\xf4\xd1\xea\xf6\x93\x04\xe5\x8d\x4e\x72\x4e\x97\x48\x3d\x91\x8c\x7d\xb8\x4f\x2f\x89\xe3\x41\xee\x5f\xe8\x6b\x94\xbe\xbb\xc6\xc8\x39\xf9\xbd\x88\x76\x6d\x1d\xb7\xfc\x39\x19\x72\xa4\xe3\x83\x5f\x91\x4b\x7c\x1e\xf5\xdf\x00\x00\x00\xff\xff\x6d\x41\x5e\xeb\x59\x04\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
