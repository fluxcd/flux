# Default values for flux.

# Weave Cloud service token
token: ""

replicaCount: 1

logFormat: fmt

image:
  repository: docker.io/fluxcd/flux
  tag: 1.21.2
  pullPolicy: IfNotPresent
  pullSecret:

service:
  type: ClusterIP
  port: 3030

# Specifies which namespaces flux should have access to
allowedNamespaces: []

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Specifies whether PSP resources should be created
  pspEnabled: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # Annotations for the Service Account
  annotations: {}

# If create is `false` and no name is given, Flux will be restricted to
# namespaces listed in allowedNamespaces and the namespace where it is
# deployed, and the kubeconfig default context will be set to that namespace.
clusterRole:
  create: true
  # The name of a cluster role to bind to; if not set and create is
  # true, a name based on fullname is generated
  name:

resources:
  # If you do want to specify resource limits, uncomment the following and adjust values
  # limits:
  #  cpu: 100m
  #  memory: 628Mi
  requests:
    cpu: 50m
    memory: 64Mi

priorityClassName: ""

nodeSelector: {}

annotations: {}

podLabels: {}

tolerations: []

affinity: {}

extraVolumeMounts: []

extraVolumes: []

# Optional DNS settings, configuring the ndots option may resolve
# nslookup issues on some Kubernetes setups.
# dnsPolicy: "None"
# dnsConfig:
#   options:
#     - name: ndots
#       value: "1"

gpgKeys:
  # These keys will be imported into GPG in the Flux container.
  secretName: ""
  # These keys will be imported into GPG in the Flux container.
  # NB: should only be used for public keys used to verify the
  # signatures of commits.
  configMapName: ""

sync:
  # use `.sync.state: secret` to store flux's state as an annotation on the secret (instead of a git tag)
  state: git
  # Duration after which sync operations time out (defaults to 1m)
  timeout:
  # Controls how often Flux will apply what’s in git, to the cluster, absent new commits.
  # Reducing this interval below a minute or so may hinder Flux, since syncs can take tens of seconds,
  # leaving not much time to do other operations.
  #  interval: "5m"

git:
  # URL of git repo with Kubernetes manifests; e.g. git.url=ssh://git@github.com/fluxcd/flux-get-started
  url: ""
  # Branch of git repo to use for Kubernetes manifests
  branch: "master"
  # Path within git repo to locate Kubernetes manifests (relative path)
  path: ""
  # Set to `true` if you intend for Flux to not be able to push changes to git.
  # Also configure state.mode to `secret` since storing state in a git tag will no longer be possible.
  readonly: false
  # Username to use as git committer
  user: "Weave Flux"
  # Email to use as git committer
  email: "support@weave.works"
  # If set, commits will be signed with this GPG key.
  signingKey: ""
  # If set, the signatures of the sync tag and commits will be verified.
  verifySignatures: false
  # If set, the author of git commits will reflect the user who initiated the commit and will differ from the git committer.
  setAuthor: false
  # Label to keep track of sync progress
  label:
  # Append "[ci skip]" to commit messages so that CI will skip builds
  ciSkip: false
  # Period at which to poll git repo for new commits
  pollInterval: "5m"
  # Duration after which git operations time out
  timeout: "20s"
  # The secret name can be used to supply your own SSH key, instead of
  # relying on Flux to generate one for you:
  # 1. Generate a SSH key named identity:
  #      ssh-keygen -q -N "" -f ./identity
  # 2. Create a Kubernetes secret:
  #      kubectl -n flux create secret generic flux-ssh --from-file=./identity
  #   2a. The SSH key will be stored in a data key matching the file name.
  #       Set the `git.secretDataKey` value below to change the data key if
  #       you want to use a different source file.
  # 3. Don't check these key files into your Git repository! Once you've created
  #    the Kubernetes secret, Delete the private key:
  #      rm ./identity
  # 4. Add ./identity.pub as a deployment key with write access in your Git repo
  # 5. Set the secret name (flux-ssh) below
  secretName: ""
  # The default secret data key for storing the Git repository deploy key
  # is "identity" which must match the filename in the steps for supplying
  # your own SSH deploy key (see secretName above).  Use this field if you
  # want to use your own filename and override the key above.
  secretDataKey: ""
  # Enables `git-secret` support, as this makes use of known GPG keys
  # you will need to have imported the paired secret-key with one of
  # the public-keys which were used in the encryption using
  # `gpgKeys.secretName`.
  secret:
    enabled: false
  # Global Git configuration See https://git-scm.com/docs/git-config for more details.
  config:
    enabled: false
    secretName: ""
    data: ""
    # data: |
    #   [credential "https://github.com"]
    #           username = foo

# If `true` SOPS support will be enabled
sops:
  enabled: false

registry:
  # Period at which to check for updated images
  automationInterval: "5m"
  # Maximum registry requests per second per host
  rps: 200
  # Maximum number of warmer connections to remote and memcache
  burst: 125
  # Output trace of image registry requests to log
  trace: false
  # Use HTTP rather than HTTPS for these image registry domains eg --set registry.insecureHosts="registry1.cluster.local\,registry2.cluster.local"
  insecureHosts:
  # Duration to keep cached image info. Must be < 1 month. (Deprecated)
  cacheExpiry:
  # Disable registry scanning completely
  disableScanning: false
  # Do not scan images that match these glob expressions
  excludeImage:
  # Only scan images that match these glob expressions
  includeImage:
  # Allow usage of (RFC3339) timestamp labels from (canonical) image refs that match these glob expressions
  useTimestampLabels:
  # AWS ECR settings
  ecr:
    region:
    includeId:
    excludeId:
    require: false
  # Azure ACR settings
  acr:
    enabled: false
    hostPath: /etc/kubernetes/azure.json
    secretName: ""
  dockercfg:
    enabled: false
    secretName: ""
    configFileName: /dockercfg/config.json

memcached:
  enabled: true
  hostnameOverride:
  repository: memcached
  tag: 1.5.20
  pullSecret:
  createClusterIP: true
  verbose: false
  maxItemSize: 5m
  maxMemory: 512
  addSecurityContext: true
  securityContext:
    runAsUser: 11211
    runAsGroup: 11211
    allowPrivilegeEscalation: false
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources:
    # If you do want to specify resource limits, uncomment the following and adjust values
    # limits:
    #  cpu: 100m
    #  memory: 628Mi
    requests:
      cpu: 50m
      memory: 64Mi
  priorityClassName: ""

ssh:
  # Overrides for git over SSH. If you use your own git server, you
  # will likely need to provide a host key for it in this field.
  known_hosts: ""
  # Specify options for SSH key generation.
  keygen:
    # Specify a key format for key generation.
    # RFC4716” (RFC 4716/SSH2 public or private key),
    # “PKCS8” (PEM PKCS8 public key) or
    # “PEM” (PEM public key).
    format: "RFC4716"
  secret:
    # Annotations for the Secret
    annotations: {}
  config: ""
    # specify the config which would go in /root/.ssh/config file
    # for e.g.
  # config: |
  #   Host github.com
  #   ProxyCommand socat STDIO PROXY:<proxyIP>:%h:%p,proxyport=<proxyPort>,proxyauth=<username:password>
  #   User git
  #   Hostname ssh.github.com
  #   Port 443
  #   IdentityFile /etc/fluxd/ssh/identity


kube:
  # Disable KUBECONFIG env var and passing the default config into the Container
  # This means you need to provide both on your own, by using extraVars and ExtraVolume(Mounts)
  externalConfig: false
  # Override for kubectl default config
  config: |
    apiVersion: v1
    clusters: []
    contexts:
    - context:
        cluster: ""
        namespace: default
        user: ""
      name: default
    current-context: default
    kind: Config
    preferences: {}
    users: []
# For https://github.com/justinbarrick/fluxcloud/
# additionalArgs:
# - --connect=ws://fluxcloud

# The contents of the secret will be defined as environment variables
# in the Flux container. Once defined, you can use the variables in your
# `git.url`: `https://$(GIT_AUTHUSER):$(GIT_AUTHKEY)@github.com/fluxcd/flux-get-started.git`
env:
  secretName: ""

# Additional environment variables to set
extraEnvs: []
# extraEnvs:
#   - name: FOO
#     value: bar

# Additional environment variables from a list of sources to set
extraEnvsFrom: []
# extraEnvsFrom:
#   - configMapRef:
#       name: special-config

prometheus:
  enabled: false
  serviceMonitor:
    # Enables ServiceMonitor creation for the Prometheus Operator
    create: false
    interval:
    scrapeTimeout:
    namespace:
    additionalLabels: {}

syncGarbageCollection:
  enabled: false
  dry: false

# Enables manifest generation
manifestGeneration: false

# Add your own init container or uncomment and modify the given example.
initContainers: {}
#   flux-init:  # <- will be used as container name
#     image: "busybox:1.30.1"
#     imagePullPolicy: "IfNotPresent"
#     command: ['sh', '-c', 'counter=0; until [ "$counter" -ge 30 ]; do if [ -f /tmp/flux-deploy-key/identity ]; then exit 0; else echo waiting for flux deploy key && sleep 1 && counter=$((counter+1)); fi; done; exit 1;']
#     volumeMounts:
#       - mountPath: /tmp/flux-deploy-key
#         name: flux-deploy-key

# Additional containers to be added to the flux pod.
extraContainers: []

# Host aliases to be added to the Flux pod - see < - ip: <https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/>
hostAliases: {}
# - ip: "127.0.0.1"
#    hostnames:
#    - "foo.local"
#    - "bar.local"
#  - ip: "10.1.2.3"
#    hostnames:
#    - "foo.remote"
#    - "bar.remote"

dashboards:
  # If enabled, flux will create a configmap with a dashboard in json that's going to be picked up by grafana
  # See https://github.com/helm/charts/tree/master/stable/grafana#configuration - `sidecar.dashboards.enabled`
  enabled: false
  # The namespace where the dashboard is deployed, defaults to the installation namespace
  namespace:
  # The prefix of the generated configmaps
  nameprefix: dashboard
